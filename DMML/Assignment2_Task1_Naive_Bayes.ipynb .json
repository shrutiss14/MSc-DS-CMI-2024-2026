{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a0b0d469-90fa-4bc2-b1d6-8efa41c842d9",
   "metadata": {},
   "source": [
    "### DMML Assignment 2 - Task 1  \n",
    "### Naive Bayes\n",
    "**Riya S Huddar (MDS202431)**\n",
    "**Shruti Sharma (MDS202434)**  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "8e0c4414-31cc-464f-b29f-e0904e9e560e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, classification_report, confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.naive_bayes import GaussianNB\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e13130c-5e36-430a-ae2e-92cde0c6614a",
   "metadata": {},
   "source": [
    "The \"Bank Marketing Data Set\" from the UCI Machine Learning Repository is related with direct marketing campaigns (phone calls) of a Portuguese banking institution.The classification goal is to predict if the client will subscribe a term deposit (variable y)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "490600ba-9483-4334-8e7e-bd9035e064cb",
   "metadata": {},
   "source": [
    "#### Naive Bayes Classifier\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a56d3c56-4700-4c6e-8ce3-2a46e014da02",
   "metadata": {},
   "source": [
    "#### Dataset Composition\n",
    "\n",
    "The dataset consists of both **numeric** and **categorical** variables. \n",
    "\n",
    "- **Numeric Variables:** These are continuous or discrete numerical features that represent measurable quantities. They may require feature scaling to ensure consistency in model performance.\n",
    "- **Categorical Variables:** These are qualitative features representing different categories or classes. Categorical variables are typically encoded into numerical values before being used in machine learning models.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "378df351-ed38-4369-a96b-edda5a2c24d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 41188 entries, 0 to 41187\n",
      "Data columns (total 21 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   age             41188 non-null  int64  \n",
      " 1   job             41188 non-null  object \n",
      " 2   marital         41188 non-null  object \n",
      " 3   education       41188 non-null  object \n",
      " 4   default         41188 non-null  object \n",
      " 5   housing         41188 non-null  object \n",
      " 6   loan            41188 non-null  object \n",
      " 7   contact         41188 non-null  object \n",
      " 8   month           41188 non-null  object \n",
      " 9   day_of_week     41188 non-null  object \n",
      " 10  duration        41188 non-null  int64  \n",
      " 11  campaign        41188 non-null  int64  \n",
      " 12  pdays           41188 non-null  int64  \n",
      " 13  previous        41188 non-null  int64  \n",
      " 14  poutcome        41188 non-null  object \n",
      " 15  emp.var.rate    41188 non-null  float64\n",
      " 16  cons.price.idx  41188 non-null  float64\n",
      " 17  cons.conf.idx   41188 non-null  float64\n",
      " 18  euribor3m       41188 non-null  float64\n",
      " 19  nr.employed     41188 non-null  float64\n",
      " 20  y               41188 non-null  object \n",
      "dtypes: float64(5), int64(5), object(11)\n",
      "memory usage: 6.6+ MB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# Define the file path to the dataset\n",
    "file_path = r\"D:\\CMI\\DMML\\Assignment_2\\bank-data\\bank-data\\bank-additional-full.csv\"\n",
    "\n",
    "# Load the dataset into a Pandas DataFrame\n",
    "# The separator is ';' since this dataset uses a semicolon instead of a comma\n",
    "df = pd.read_csv(file_path, sep=';')\n",
    "\n",
    "# Display dataset information including column names, data types, and missing values\n",
    "print(df.info())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "3015044b-f4e5-46b9-a65d-74d154519730",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               age      duration      campaign         pdays      previous  \\\n",
      "count  41188.00000  41188.000000  41188.000000  41188.000000  41188.000000   \n",
      "mean      40.02406    258.285010      2.567593    962.475454      0.172963   \n",
      "std       10.42125    259.279249      2.770014    186.910907      0.494901   \n",
      "min       17.00000      0.000000      1.000000      0.000000      0.000000   \n",
      "25%       32.00000    102.000000      1.000000    999.000000      0.000000   \n",
      "50%       38.00000    180.000000      2.000000    999.000000      0.000000   \n",
      "75%       47.00000    319.000000      3.000000    999.000000      0.000000   \n",
      "max       98.00000   4918.000000     56.000000    999.000000      7.000000   \n",
      "\n",
      "       emp.var.rate  cons.price.idx  cons.conf.idx     euribor3m   nr.employed  \n",
      "count  41188.000000    41188.000000   41188.000000  41188.000000  41188.000000  \n",
      "mean       0.081886       93.575664     -40.502600      3.621291   5167.035911  \n",
      "std        1.570960        0.578840       4.628198      1.734447     72.251528  \n",
      "min       -3.400000       92.201000     -50.800000      0.634000   4963.600000  \n",
      "25%       -1.800000       93.075000     -42.700000      1.344000   5099.100000  \n",
      "50%        1.100000       93.749000     -41.800000      4.857000   5191.000000  \n",
      "75%        1.400000       93.994000     -36.400000      4.961000   5228.100000  \n",
      "max        1.400000       94.767000     -26.900000      5.045000   5228.100000  \n"
     ]
    }
   ],
   "source": [
    "print(df.describe())  # Summary stats of numerical features"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "899e1cbc-33a1-4789-9742-3f5b851fba8e",
   "metadata": {},
   "source": [
    "#### Class Imbalance in the Dataset\n",
    "\n",
    "The dataset is highly **imbalanced**, with a significant disparity between the two classes in the target variable (**y**):\n",
    "\n",
    "- **No:** 36,548 instances  \n",
    "- **Yes:** 4,640 instances  \n",
    "\n",
    "This imbalance can lead to biased model predictions, where the classifier favors the majority class. As a result, accuracy alone may not be a reliable evaluation metric. Instead, metrics such as **precision, recall, F1-score, and AUC-ROC** are more appropriate for assessing model performance.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "84c598a6-64d8-4bcc-9a5f-f0ed64e7e34a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y\n",
      "no     36548\n",
      "yes     4640\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Display the distribution of the target variable 'y'\n",
    "print(df['y'].value_counts())  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf328805-3034-47fd-bf88-34c9973224b2",
   "metadata": {},
   "source": [
    "#### Data Preprocessing  \n",
    "\n",
    "To prepare the dataset for modeling, categorical variables were encoded as follows:  \n",
    "\n",
    "- **One-Hot Encoding (OHE)** was applied to categorical features (excluding the target variable 'y'), converting them into numerical format. The first category of each feature was dropped (`drop_first=True`) to avoid multicollinearity.  \n",
    "- The target variable **'y'** was mapped to **1** for `'yes'` and **0** for `'no'` to facilitate binary classification.  \n",
    "\n",
    "This preprocessing ensures the dataset is suitable for machine learning models.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "34a4f1c1-0082-482e-ac21-3c7beb6e7d4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a copy of the original dataframe to avoid modifying it directly\n",
    "df_encoded = df.copy()\n",
    "\n",
    "# Step 1: Identify categorical columns, excluding the target variable 'y'\n",
    "categorical_columns = df.select_dtypes(include=['object']).columns  # Select only object-type columns\n",
    "categorical_columns = [col for col in categorical_columns if col != 'y']  # Exclude 'y' from encoding\n",
    "\n",
    "# Step 2: Perform One-Hot Encoding on categorical columns (excluding 'y'), dropping the first category to avoid multicollinearity\n",
    "df_encoded = pd.get_dummies(df, columns=categorical_columns, drop_first=True)\n",
    "\n",
    "# Step 3: Encode the target variable 'y' (mapping 'yes' to 1 and 'no' to 0 for binary classification)\n",
    "df_encoded['y'] = df_encoded['y'].map({'yes': 1, 'no': 0})\n",
    "\n",
    "# The dataset is now preprocessed and ready for modeling\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "386c13df-0bb0-43f6-8cd8-30330cc13540",
   "metadata": {},
   "source": [
    "#### Impact of the 'Duration' Feature on Model Performance  \n",
    "\n",
    "The feature **'duration'** (last contact duration in seconds) yields a high accuracy (**~89.24%**) when used as the sole predictor. However, it is **not appropriate** for a realistic predictive model due to the following reasons:  \n",
    "\n",
    "1. **Data Leakage**: The 'duration' of a call is only known **after** the call is completed. However, the goal of the model is to predict **before** the call occurs.  \n",
    "2. **Target Dependency**: If `duration = 0`, then `y = \"no\"`, making it trivially easy to classify. This artificially inflates accuracy but does not generalize to real-world scenarios.  \n",
    "3. **Benchmarking Only**: As stated in the dataset description, **'duration' should only be used for benchmarking purposes** and must be excluded when building a real predictive model.  \n",
    "\n",
    "#### Decision:  \n",
    "To ensure a **realistic and generalizable model**, we **remove the 'duration' feature** from further analysis.  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "5fbbe0f6-4e46-4319-9118-8bc5b00e2d2b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set size: (32950, 1)\n",
      "Test set size: (8238, 1)\n",
      "Model Accuracy: 0.8924\n"
     ]
    }
   ],
   "source": [
    "# Define features (X) and target (y)\n",
    "X_dur = df_encoded[['duration']].values  # Extract 'duration' column\n",
    "y = df_encoded['y']  # Target variable\n",
    "\n",
    "# Split into 80% train, 20% test\n",
    "X_train_dur, X_test_dur, y_train_dur, y_test_dur = train_test_split(\n",
    "    X_dur, y, test_size=0.2, random_state=42\n",
    ")\n",
    "\n",
    "# Standardize the 'duration' feature\n",
    "scaler_dur = StandardScaler()\n",
    "X_train_dur = scaler_dur.fit_transform(X_train_dur)  # Fit and transform training data\n",
    "X_test_dur = scaler_dur.transform(X_test_dur)  # Transform test data\n",
    "\n",
    "# Print dataset shapes\n",
    "print(\"Train set size:\", X_train_dur.shape)\n",
    "print(\"Test set size:\", X_test_dur.shape)\n",
    "\n",
    "# Initialize and train the Naïve Bayes model\n",
    "nb_model_dur = GaussianNB()\n",
    "nb_model_dur.fit(X_train_dur, y_train_dur)\n",
    "\n",
    "# Predict on test data\n",
    "y_pred_dur = nb_model_dur.predict(X_test_dur)\n",
    "\n",
    "# Evaluate model accuracy\n",
    "accuracy_dur = accuracy_score(y_test_dur, y_pred_dur)\n",
    "print(f\"Model Accuracy: {accuracy_dur:.4f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f483207-19e4-4ff7-af69-c3658c602db2",
   "metadata": {},
   "source": [
    "#### Train-Test Split  \n",
    "\n",
    "To evaluate the model effectively, we split the dataset into **training (80%)** and **testing (20%)** subsets while maintaining class balance.  \n",
    "\n",
    "#### **Key Steps in Splitting**  \n",
    "1. **Feature Selection**:  \n",
    "   - The **target variable (`y`)** is separated.  \n",
    "   - The **'duration'** feature is removed to avoid data leakage.  \n",
    "\n",
    "2. **Stratified Splitting**:  \n",
    "   - Since the dataset is **imbalanced** (majority class: 'no', minority class: 'yes'), we use **`stratify=y`** to ensure the training and test sets maintain the same class distribution as the original data.  \n",
    "   \n",
    "3. **Random State**:  \n",
    "   - A **fixed `random_state=42`** is used for reproducibility, ensuring the same split every time.  \n",
    "\n",
    "#### **Dataset Sizes After Splitting**  \n",
    "- **Training Set**: 80% of the data  \n",
    "- **Test Set**: 20% of the data  \n",
    "- **Class Distribution is Preserved** due to stratification  \n",
    "\n",
    "This ensures that our model learns effectively while being evaluated on an unseen test set with a realistic distribution.  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "62bc841e-1f7f-41a2-8faf-822cfe148f1f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set size: (32950, 52)\n",
      "Test set size: (8238, 52)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Define feature matrix (X) and target variable (y)\n",
    "X = df_encoded.drop(columns=['y', 'duration'])  # Drop target ('y') and 'duration' from features\n",
    "y = df_encoded['y']  # Extract target column\n",
    "\n",
    "# Split data into 80% training and 20% testing (Stratified to maintain class balance)\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, random_state=42, stratify=y\n",
    ")\n",
    "\n",
    "# Initialize StandardScaler\n",
    "#scaler = MinMaxScaler()\n",
    "\n",
    "# Fit on training data and transform both training & test sets\n",
    "#X_train = scaler.fit_transform(X_train)  # Fit & transform training data\n",
    "#X_test = scaler.transform(X_test)  # Transform test data (DO NOT FIT AGAIN!)\n",
    "\n",
    "# Print dataset shapes for verification\n",
    "print(\"Train set size:\", X_train.shape)\n",
    "print(\"Test set size:\", X_test.shape)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1fc727b-d894-4052-b077-875e0a25fd67",
   "metadata": {},
   "source": [
    "#### **Training the Model**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "dcc1879f-eb6d-443d-a674-35373a7e6ac1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-4 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-4 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-4 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-4 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-4 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-4 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-4 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-4 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GaussianNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GaussianNB<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.naive_bayes.GaussianNB.html\">?<span>Documentation for GaussianNB</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GaussianNB()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "GaussianNB()"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "#  Initialize the Gaussian Naïve Bayes model\n",
    "nb_model = GaussianNB()\n",
    "\n",
    "# Train the model using the scaled training data\n",
    "nb_model.fit(X_train, y_train)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "600bf28b-fe00-47b0-afd7-cf9b833ac659",
   "metadata": {},
   "source": [
    "#### Model Evaluation  \n",
    "\n",
    "After training the **Naïve Bayes model**, we assess its performance using various classification metrics.  \n",
    "\n",
    "#### **1. Predictions**  \n",
    "- **Class Labels (`y_pred`)**: The model predicts whether an instance belongs to class **'yes' (1)** or **'no' (0)**.  \n",
    "- **Probability Estimates (`y_prob`)**: The model assigns probabilities for each instance belonging to the positive class (`y = 1`), which is useful for threshold-based decision-making and ROC-AUC evaluation.  \n",
    "\n",
    "#### **2. Performance Metrics**  \n",
    "We compute the following classification metrics:  \n",
    "- **Accuracy**: Measures overall correctness of predictions.  \n",
    "- **Precision**: Measures how many of the predicted **positive cases** are actually positive (reduces false positives).  \n",
    "- **Recall**: Measures how many of the **actual positives** were correctly identified (reduces false negatives).  \n",
    "- **F1 Score**: Harmonic mean of precision and recall, balancing both metrics.  \n",
    "- **ROC-AUC Score**: Evaluates the model's ability to distinguish between classes based on probability predictions.  \n",
    "\n",
    "#### **3. Confusion Matrix**  \n",
    "A **confusion matrix** visually represents model performance:  \n",
    "- **True Positives (TP)**: Correctly predicted 'yes' cases.  \n",
    "- **True Negatives (TN)**: Correctly predicted 'no' cases.  \n",
    "- **False Positives (FP)**: Incorrectly predicted 'yes' when it was 'no'.  \n",
    "- **False Negatives (FN)**: Incorrectly predicted 'no' when it was 'yes'.  \n",
    "\n",
    "We plot this using **Seaborn’s heatmap** to visually analyze misclassifications.  \n",
    "\n",
    "#### **4. Classification Report**  \n",
    "Finally, we generate a **detailed classification report**, which provides precision, recall, and F1-score for both classes, giving deeper insights into model performance.  \n",
    "\n",
    "By analyzing these metrics, we can determine whether the model is effective or if improvements are needed.  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "6c7f4d96-ee55-4df0-b15f-377d37a8f97d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8694\n",
      "Precision: 0.4237\n",
      "Recall: 0.4429\n",
      "F1 Score: 0.4331\n",
      "ROC-AUC Score: 0.7730\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.92      0.93      7310\n",
      "           1       0.42      0.44      0.43       928\n",
      "\n",
      "    accuracy                           0.87      8238\n",
      "   macro avg       0.68      0.68      0.68      8238\n",
      "weighted avg       0.87      0.87      0.87      8238\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Predict class labels on the test set\n",
    "y_pred = nb_model.predict(X_test)\n",
    "\n",
    "# Predict probability estimates for the positive class (y = 1)\n",
    "y_prob = nb_model.predict_proba(X_test)[:, 1]  \n",
    "\n",
    "# Compute classification metrics\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "precision = precision_score(y_test, y_pred)\n",
    "recall = recall_score(y_test, y_pred)\n",
    "f1 = f1_score(y_test, y_pred)\n",
    "roc_auc = roc_auc_score(y_test, y_prob)\n",
    "\n",
    "# Print evaluation metrics\n",
    "print(f'Accuracy: {accuracy:.4f}')\n",
    "print(f'Precision: {precision:.4f}')\n",
    "print(f'Recall: {recall:.4f}')\n",
    "print(f'F1 Score: {f1:.4f}')\n",
    "print(f'ROC-AUC Score: {roc_auc:.4f}')\n",
    "\n",
    "# Generate confusion matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "# Plot the confusion matrix\n",
    "plt.figure(figsize=(5, 4))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['No', 'Yes'], yticklabels=['No', 'Yes'])\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()\n",
    "\n",
    "# Print full classification report\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ffcdefd-252c-47f1-95b9-ee8110951ba4",
   "metadata": {},
   "source": [
    "#### Threshold-Based Predictions & Model Evaluation  \n",
    "\n",
    "#### **1. Generating Predictions**  \n",
    "- The **Naïve Bayes model** generates:  \n",
    "  - **Class Predictions (`y_pred`)**: Default binary classification (0 or 1).  \n",
    "  - **Probability Estimates (`y_prob`)**: The likelihood that a sample belongs to the positive class (`y = 1`).  \n",
    "\n",
    "#### **2. Adjusting the Decision Threshold**  \n",
    "- By default, classification models predict **1 if probability > 0.5**.  \n",
    "- However, in imbalanced datasets, a lower threshold can **increase recall** by capturing more positives.  \n",
    "- Here, we set **threshold = 0.1**, meaning:  \n",
    "  - If `P(y=1) > 0.1`, classify as **'yes' (1)**.  \n",
    "  - Else, classify as **'no' (0)**.  \n",
    "\n",
    "#### **3. Model Evaluation Metrics**  \n",
    "We compute key classification metrics:  \n",
    "- **Accuracy**: Measures overall correctness.  \n",
    "- **Precision**: How many predicted positives were actually correct?  \n",
    "- **Recall**: How many actual positives were correctly identified?  \n",
    "- **F1 Score**: A balance between precision and recall.  \n",
    "- **ROC-AUC Score**: Measures the model’s ability to distinguish between classes.  \n",
    "\n",
    "#### **4. Confusion Matrix**  \n",
    "A **confusion matrix** is plotted to visualize classification results:  \n",
    "- **True Positives (TP)**: Correctly predicted 'yes'.  \n",
    "- **True Negatives (TN)**: Correctly predicted 'no'.  \n",
    "- **False Positives (FP)**: Incorrectly predicted 'yes' when it was 'no'.  \n",
    "- **False Negatives (FN)**: Incorrectly predicted 'no' when it was 'yes'.  \n",
    "\n",
    "#### **5. Classification Report**  \n",
    "A detailed **classification report** provides precision, recall, and F1-score for both classes.  \n",
    "\n",
    "Lowering the threshold can improve **recall** (identifying more positives), but may reduce **precision** (increase false positives). The optimal threshold depends on the business use case.  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "a03eb46f-7fdc-493e-8562-01fc83c0163a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8541\n",
      "Precision: 0.3805\n",
      "Recall: 0.4698\n",
      "F1 Score: 0.4204\n",
      "ROC-AUC Score: 0.7730\n"
     ]
    },
    {
     "data": {
      "image/png": "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xMRE+Pn5wcbGBqampoiKisJLL72EWrVqQaFQYOHChZg2bRosLS3Rt29f5OfnIy4uDllZWZg5cyZGjBiB+fPnw8/PDx9++CGuXr2Kzz77TKPzzMjIKPVcpFKpRPPmzXH9+nVERkaiU6dO+P7777F3717Jcxo9ejQ+++wz3L17F9OmTcPQoUOhVCoB4D9rJyJwoQ1VracX2jwtMDBQbXHME3fv3hWmTp0q2NnZCcbGxoK9vb0wcuRI4fr16+KcTz75RKhXr55Qu3ZtYfTo0cKcOXOeudBGEAShqKhIWLJkidC4cWPB2NhYaNSokRAUFCRu37Bhg2Bvby8YGBgInp6e4vj27duFdu3aCSYmJkLdunWFV155RdizZ4+4PTo6Wmjbtq1gYmIitGvXTti9e7dGC20AlHoFBgYKgiAIs2fPFqytrYXatWsLw4YNE1asWCEoFIpS37c1a9YIdnZ2Qq1atYQhQ4YId+7cUXuf59XOhTZEgiAThEq4CUJERPQC4sP7REREJRiKREREJRiKREREJRiKREREJRiKREREJRiKREREJRiKREREJRiKREREJRiKREREJRiKREREJRiKREREJf4fvqSEYgz9aw8AAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 500x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.90      0.92      7310\n",
      "           1       0.38      0.47      0.42       928\n",
      "\n",
      "    accuracy                           0.85      8238\n",
      "   macro avg       0.66      0.69      0.67      8238\n",
      "weighted avg       0.87      0.85      0.86      8238\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Generate predictions using the trained Naïve Bayes model\n",
    "y_pred = nb_model.predict(X_test)  # Initial class predictions\n",
    "y_prob = nb_model.predict_proba(X_test)[:, 1]  # Extract probabilities for the positive class (y = 1)\n",
    "\n",
    "# Define a classification threshold\n",
    "threshold = 0.1  \n",
    "\n",
    "# Convert probabilities into class labels based on the chosen threshold\n",
    "y_pred = (y_prob > threshold).astype(int)\n",
    "\n",
    "# Calculate model evaluation metrics\n",
    "accuracy = accuracy_score(y_test, y_pred)  # Compute accuracy\n",
    "precision = precision_score(y_test, y_pred)  # Compute precision\n",
    "recall = recall_score(y_test, y_pred)  # Compute recall\n",
    "f1 = f1_score(y_test, y_pred)  # Compute F1-score\n",
    "roc_auc = roc_auc_score(y_test, y_prob)  # Compute ROC-AUC score\n",
    "\n",
    "# Print evaluation metrics\n",
    "print(f'Accuracy: {accuracy:.4f}')\n",
    "print(f'Precision: {precision:.4f}')\n",
    "print(f'Recall: {recall:.4f}')\n",
    "print(f'F1 Score: {f1:.4f}')\n",
    "print(f'ROC-AUC Score: {roc_auc:.4f}')\n",
    "\n",
    "# Generate confusion matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "# Plot the confusion matrix\n",
    "plt.figure(figsize=(5, 4))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', \n",
    "            xticklabels=['No', 'Yes'], yticklabels=['No', 'Yes'])\n",
    "plt.xlabel('Predicted Label')\n",
    "plt.ylabel('Actual Label')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()\n",
    "\n",
    "# Print the detailed classification report\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e82e6e4a-499e-4646-8e4c-034ce9b42e93",
   "metadata": {},
   "source": [
    "#### **Forward Feature Selection using F1-Score for Naïve Bayes Classification**\n",
    "\n",
    "#### **1. Introduction**\n",
    "Feature selection helps in improving model performance by removing irrelevant or redundant features. This process implements **Forward Selection**, where features are selected iteratively based on their contribution to the **F1-score**, using a **Naive Bayes Classifier**.\n",
    "\n",
    "#### **2. Forward Selection Process**\n",
    "- Start with **zero** selected features.\n",
    "- **Iterate** over all features, selecting the most significant one at each step.\n",
    "- Train a **Naive Bayes model** using the selected features.\n",
    "- Compute **F1-score** for evaluation.\n",
    "- Stop adding features when additional features no longer improve F1-score."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "b678d4d4-e8bd-4e2e-bb19-5a1f7b09f069",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkAAAAHFCAYAAAAaD0bAAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAB3zklEQVR4nO3deVxU9foH8M8wwAy7CgqoiGQlIu6moZnlgpaZlv0yd29arl2XbjctC7TFJVO6XbW0q+Zt85a2WGZh5pbmji1YmqJoggsmILLOfH9/wDnMwAwzA2fmDPB5v17zKs6cOXPOYZnH5/t8n69GCCFAREREVI94qH0CRERERK7GAIiIiIjqHQZAREREVO8wACIiIqJ6hwEQERER1TsMgIiIiKjeYQBERERE9Q4DICIiIqp3GAARERFRvcMAiBS3fv16aDQai49//OMfap+e05w9exYajQbr16+3ue+JEycwZswY3HLLLdDr9QgJCUHnzp0xffp05OTkOPze0j0/e/as4yduh9TUVCQmJlo8/vjx49GyZUunvK+Sxo8fb/Xn8ssvv5T3S0pKwsMPP4yoqChoNBrcc889Dr/XgQMH8NBDD6FFixbQ6XQIDQ1FXFwcnn76aQWvyDUSExPN7pW3tzeioqIwY8YMXL9+Xe3TU9XOnTuh0Wiwc+dOtU+FqsFT7ROgumvdunWIjo4229a0aVOVzsZ9HDt2DD179kSbNm3w4osvomXLlrh69SqOHz+Ojz76CP/4xz8QGBio9mmaSU1Nxfz583HPPfdUCnZeeOEFzJgxQ50Tc5CPjw927NhRabvpz+lbb70FPz8/9OnTB1u2bHH4Pb766is8+OCDuOeee7BkyRKEh4cjIyMDhw8fxkcffYTXX3+9Rteglm3btiEoKAi5ubnYunUr3njjDRw8eBD79u2DRqNR+/RU0blzZ+zfvx8xMTFqnwpVAwMgcprY2Fh07dpV8ePevHkTvr6+ih/XVe+dlJQEDw8P7Ny5EwEBAfL2Rx55BC+99BJq2/J8rVq1UvsU7Obh4YE777yzyn1SU1Ph4VGaHI+NjXX4PZYsWYKoqCh888038PQs/xP72GOPYcmSJQ4fryaU/F3p0qULQkJCAAD9+/dHVlYW/vvf/2Lfvn3o2bOn09/fFjX+LgQGBtr8eSL3xSEwUs0XX3yBuLg4+Pr6IiAgAP3798f+/fvN9pHS70ePHsUjjzyChg0bolWrVvjqq6+g0Whw6NAhed9NmzZBo9Fg0KBBZsdo3749hg0bJn+9YsUK3H333WjSpAn8/PzQrl07LFmyBMXFxWavu+eeexAbG4vdu3ejR48e8PX1xeOPPw4AuHjxIh599FEEBAQgKCgIw4cPR2Zmpl3XnZWVhcDAQPj7+1t8vuK/prdv346+ffsiMDAQvr6+6NmzJ7777ju73sve1/72228YMWIEQkNDodPp0KJFC4wdOxaFhYVYv349/u///g8AcO+998pDIdJQn6UhsIKCAsydOxdRUVHw9vZGs2bNMG3atEpDJi1btsQDDzyAbdu2oXPnzvDx8UF0dDTWrl1r1/U5gxT8VFdWVhZCQkLMgp+qjv3BBx8gLi4O/v7+8Pf3R8eOHfGf//zHbJ+1a9eiQ4cO0Ov1aNSoER566CGcOHHCbJ/x48fD398fP//8M+Lj4xEQEIC+ffsCAIqKivDyyy8jOjoaOp0OjRs3xt/+9jdcuXKl2tcpffCfO3cOQNW/L+np6Rg9ejSaNGkCnU6HNm3a4PXXX4fRaDQ75oULF/DII48gICAADRo0wKhRo3Do0KFKQ8tKXOuOHTtwzz33IDg4GD4+PmjRogWGDRuGmzdvyvusWrUKHTp0gL+/PwICAhAdHY3nnntOft7aEJgjf9t+/fVXjBgxAkFBQQgNDcXjjz+O7OzsanxHyFEMgMhpDAYDSkpKzB6SDz74AEOGDEFgYCA+/PBD/Oc//8Fff/2Fe+65B3v37q10rIcffhi33norPv74Y7z11lvo3bs3vLy8sH37dnmf7du3w8fHB7t27ZKDmcuXL+OXX35Bv3795P1Onz6NkSNH4r///S++/PJLTJgwAa+99homTZpU6X0zMjIwevRojBw5Elu3bsXUqVORn5+Pfv364dtvv8XChQvx8ccfIywsDMOHD7frvsTFxSEjIwOjRo3Crl27kJ+fb3Xf9957D/Hx8QgMDMS7776L//3vf2jUqBEGDBhgMwiy97XHjx/HHXfcgR9//BELFizA119/jYULF6KwsBBFRUUYNGgQXn31VQClweP+/fuxf//+SoGmRAiBoUOHYunSpRgzZgy++uorzJ49G++++y769OmDwsJCs/2PHz+Op59+GrNmzcLnn3+O9u3bY8KECdi9e7dd99NRFX8mDQaDosePi4vDgQMH8Pe//x0HDhyoFFibevHFFzFq1Cg0bdoU69evx6effopx48bJQQUALFy4EBMmTEDbtm2xefNmvPHGG/jpp58QFxeHU6dOmR2vqKgIDz74IPr06YPPP/8c8+fPh9FoxJAhQ7Bo0SKMHDkSX331FRYtWoTk5GTcc889Vf78VeWPP/4AADRu3FjeZun35cqVK+jRowe+/fZbvPTSS/jiiy/Qr18//OMf/8D06dPl1+bl5eHee+/F999/j8WLF+N///sfQkNDrf5e1eRaz549i0GDBsHb2xtr167Ftm3bsGjRIvj5+aGoqAgA8NFHH2Hq1Kno3bs3Pv30U3z22WeYNWsW8vLyqrwvjv5tGzZsGG6//XZs2rQJc+bMwQcffIBZs2Y59s2g6hFEClu3bp0AYPFRXFwsDAaDaNq0qWjXrp0wGAzy63Jzc0WTJk1Ejx495G0JCQkCgHjxxRcrvc9dd90l+vTpI3996623imeeeUZ4eHiIXbt2CSGEeP/99wUAcfLkSYvnajAYRHFxsdiwYYPQarXi2rVr8nO9e/cWAMR3331n9ppVq1YJAOLzzz832/7EE08IAGLdunVV3p+CggIxdOhQ+Z5otVrRqVMn8fzzz4vLly/L++Xl5YlGjRqJwYMHVzrnDh06iG7dusnbpHuelpbm8Gv79OkjGjRoYPbeFX388ccCgPj+++8rPTdu3DgRGRkpf71t2zYBQCxZssRsv40bNwoAYvXq1fK2yMhIodfrxblz5+Rt+fn5olGjRmLSpElWz6c6xo0bZ/FnsmfPnlZf07ZtW9G7d2+H3ufq1avirrvuko/v5eUlevToIRYuXChyc3Pl/c6cOSO0Wq0YNWqU1WP99ddfwsfHR9x///1m29PT04VOpxMjR46sdH1r16412/fDDz8UAMSmTZvMth86dEgAECtXrqzyeqTfwczMTFFcXCz++usv8d577wkfHx8REREh8vPzhRDWf1/mzJkjAIgDBw6YbZ8yZYrQaDTi999/F0IIsWLFCgFAfP3112b7TZo0qdLvVU2v9ZNPPhEAREpKitXrnj59umjQoEGV9+b77783+72ozt+2ir8nU6dOFXq9XhiNxirfm2qOGSBymg0bNuDQoUNmD09PT/z++++4ePEixowZYzYk4O/vj2HDhuHHH380S0MDMBvCkvTt2xc//PAD8vPzce7cOfzxxx947LHH0LFjRyQnJwMozQq1aNECt912m/y6Y8eO4cEHH0RwcDC0Wi28vLwwduxYGAwGnDx50uw9GjZsiD59+pht+/777xEQEIAHH3zQbPvIkSPtui86nQ6ffvopUlNTsXz5cjz22GO4cuUKXnnlFbRp0wa///47AGDfvn24du0axo0bZ5axMBqNGDhwIA4dOmT1X6P2vvbmzZvYtWsXHn30UbN/ydeEVGQ8fvx4s+3/93//Bz8/v0qZq44dO6JFixby13q9HrfffrtZFsSSihnGisMplvj4+FT6maw43GQPIYTV7GZwcDD27NmDQ4cOYdGiRRgyZAhOnjyJuXPnol27drh69SoAIDk5GQaDAdOmTbP6Pvv370d+fn6lexkREYE+ffpYzAJW/F358ssv0aBBAwwePNjsfDt27IiwsDC7ZzCFhYXBy8sLDRs2xOjRo9G5c2ds27YNer1e3sfS78uOHTsQExODbt26mW0fP348hBDyz8uuXbsQEBCAgQMHmu03YsQIq+dU3Wvt2LEjvL298eSTT+Ldd9/FmTNnKh27W7duuH79OkaMGIHPP/9c/r5VpTp/2yr+HWnfvj0KCgpw+fJlm+9HNcMiaHKaNm3aWCyCzsrKAgCEh4dXeq5p06YwGo3466+/zAoaLe3br18/zJ8/H3v37sW5c+cQEhKCTp06oV+/fti+fTteeuklfPfdd2bDX+np6ejVqxdat26NN954Ay1btoRer8fBgwcxbdq0SsMBlt43KysLoaGhlbaHhYVVcTcqa9OmDdq0aQOg9AM1KSkJs2fPxgsvvID//e9/uHTpEoDS4mhrrl27Bj8/v0rb7X2th4cHDAYDmjdv7tC5VyUrKwuenp6VAiqNRoOwsDD5+y8JDg6udAydTmdzaKZv377YtWuX/PW4ceNstiDw8PBQpDB/165duPfee822paWlmdVCde3aVX6v4uJiPPvss1i+fDmWLFmCJUuWyDUpVd17W78rUqAv8fX1rTSD8NKlS7h+/Tq8vb0tvoc9H+xA6T8mgoKC4OXlhebNm1v8vln7fbHUJkGaESpdo7XfK0vbgJpda6tWrbB9+3YsWbIE06ZNQ15eHm655Rb8/e9/l2c0jhkzBiUlJVizZg2GDRsGo9GIO+64Ay+//DL69+9v8fjV+dtW8T7qdDoAqPbQJNmPARC5nPQLn5GRUem5ixcvwsPDAw0bNjTbbmmabffu3eHv74/t27fj7Nmz6Nu3LzQaDfr27YvXX38dhw4dQnp6ulkA9NlnnyEvLw+bN29GZGSkvD0lJcXiuVp63+DgYBw8eLDSdnuLoK29z6xZs7BgwQL88ssvACDPuHnzzTetzjSx9uFg72sNBgO0Wi0uXLhQ7XOvKDg4GCUlJbhy5YpZECSEQGZmJu644w5F3uftt99Gbm6u/LV0za7QpUsXswJ8oOoWD15eXkhISMDy5cvl7690by5cuICIiAiLr7P1u1Lxmi39vIaEhCA4OBjbtm2z+B6mMxGr0qFDB5v32Nrvi7Xzl85P2s+R36uaXmuvXr3Qq1cvGAwGHD58GG+++SZmzpyJ0NBQPPbYYwCAv/3tb/jb3/6GvLw87N69GwkJCXjggQdw8uRJs78fptcKOPa3jdTDITByudatW6NZs2b44IMPzKZ85+XlYdOmTfLsCVu8vLxw9913Izk5GTt27JD/VdarVy94enpi3rx5ckAkkf5oSv/KAko/mNesWWP3+d97773Izc3FF198Ybb9gw8+sOv1lv44AqV/IHNycuQP0p49e6JBgwZITU2VswkVH9b+pWvva318fNC7d298/PHHVWYCHPlXqXS/33vvPbPtmzZtQl5entn3oyZat25tdj2ubMYYEBBg9Xth7fsrzdqSvr/x8fHQarVYtWqV1feJi4uDj49PpXt54cIF7Nixw657+cADDyArKwsGg8Hiz0Hr1q3tuubq6tu3L1JTU3H06FGz7Rs2bIBGo5Ezab1790Zubi6+/vprs/0++ugju9+rOteq1WrRvXt3rFixAgAqnScA+Pn54b777sPzzz+PoqIi/PrrrxbfX6m/beQazACRy3l4eGDJkiUYNWoUHnjgAUyaNAmFhYV47bXXcP36dSxatMjuY/Xt21furitlenx8fORZJ+3bt0eTJk3k/fv37w9vb2+MGDEC//znP1FQUIBVq1bhr7/+svs9x44di+XLl2Ps2LF45ZVXcNttt2Hr1q345ptv7Hr9k08+ievXr2PYsGGIjY2FVqvFb7/9huXLl8PDwwPPPvssgNK6gTfffBPjxo3DtWvX8Mgjj6BJkya4cuUKjh8/jitXrlj98HTktcuWLcNdd92F7t27Y86cObj11ltx6dIlfPHFF3j77bcREBAg98NZvXo1AgICoNfrERUVZXEYpH///hgwYACeffZZ5OTkoGfPnvjpp5+QkJCATp06YcyYMXbfazUcPnxY7nidk5MDIQQ++eQTAMAdd9xh8V/+pgYMGIDmzZtj8ODBiI6OhtFoREpKCl5//XX4+/vLQywtW7bEc889h5deegn5+fnyVOjU1FRcvXoV8+fPR4MGDfDCCy/gueeew9ixYzFixAhkZWVh/vz50Ov1SEhIsHk9jz32GN5//33cf//9mDFjBrp16wYvLy9cuHAB33//PYYMGYKHHnqoZjetCrNmzcKGDRswaNAgLFiwAJGRkfjqq6+wcuVKTJkyBbfffjuA0iHM5cuXY/To0Xj55Zdx66234uuvv5Z/r+xpT2Dvtb711lvYsWMHBg0ahBYtWqCgoEBuvSD9HXniiSfg4+ODnj17Ijw8HJmZmVi4cCGCgoKsZjGV/NtGLqBe/TXVVdKMpEOHDlW532effSa6d+8u9Hq98PPzE3379hU//PCD2T7STIkrV65YPMbx48cFAHHbbbeZbX/llVcEADF79uxKr9myZYvo0KGD0Ov1olmzZuKZZ54RX3/9daVZTr179xZt27a1+L4XLlwQw4YNE/7+/iIgIEAMGzZM7Nu3z65ZYN988414/PHHRUxMjAgKChKenp4iPDxcPPzww2L//v2V9t+1a5cYNGiQaNSokfDy8hLNmjUTgwYNEh9//LG8T8VZYI68VgghUlNTxf/93/+J4OBg4e3tLVq0aCHGjx8vCgoK5H2SkpJEVFSU0Gq1ZtdZcRaYEKUzuZ599lkRGRkpvLy8RHh4uJgyZYr466+/zPaLjIwUgwYNqnTNvXv3dnj2lS3jxo0Tfn5+du0HK7MYbX1vhSid7TZy5Ehx2223CX9/f+Hl5SVatGghxowZI1JTUyvtv2HDBnHHHXcIvV4v/P39RadOnSq9zzvvvCPat28vvL29RVBQkBgyZIj49ddf7b6+4uJisXTpUvnn3t/fX0RHR4tJkyaJU6dOVXk9tn4HJVX9vpw7d06MHDlSBAcHCy8vL9G6dWvx2muvmc2UEqJ0dtvDDz9s9nu1devWSrMua3qt+/fvFw899JCIjIwUOp1OBAcHi969e4svvvhCPs67774r7r33XhEaGiq8vb1F06ZNxaOPPip++ukneZ+Ks8AkNfnbZu13mZSnEaKWtZ0lIqJ649VXX8W8efOQnp6uaLE+EYfAiIjILfz73/8GULo2W3FxMXbs2IF//etfGD16NIMfUhwDICIicgu+vr5Yvnw5zp49i8LCQrRo0QLPPvss5s2bp/apUR3EITAiIiKqdzgNnoiIiOodBkBERERU7zAAIiIionqHRdAWGI1GXLx4EQEBARbbrRMREZH7EUIgNzcXTZs2tdk8kwGQBRcvXrS6Ng8RERG5t/Pnz9tsncAAyAJpwbzz589XWm2YiIiI3FNOTg4iIiLsWuSXAZAF0rBXYGAgAyAiIqJaxp7yFRZBExERUb3DAIiIiIjqHQZAREREVO8wACIiIqJ6hwEQERER1TsMgIiIiKjeYQBERERE9Q4DICIiIqp3GAARERFRvcNO0ERkN4NR4GDaNVzOLUCTAD26RTWC1oMLBtujLt67unhNdZE93yd328cVGAAR1XKu+mOy7ZcMzN+SiozsAnlbeJAeCYNjMDA2XPH3q01sfQ+UvHfu8gFj7zW5y4ddfWXP98nd9nEVjRBCuPQda4GcnBwEBQUhOzuba4GRqpT6YK3ph+a2XzIw5b2jqPjHQjrCqtGdMTA2vM79C9Eetr4H9t47Jd7L3n1qyt5rcqcPu/rInu8TALfap6Y/F458fjMAsoABELkDpT5Ya/qh2T8mDHct3mH2XMX3CwvS44VBMXjpK9f9C9Edgi1b34MVIzvhpa9O2Lx3e5/tA62HpsZBKKDcB4y1czEYhd0/D9M+cO6HHZWy9L0CYPP7FBqoA6BBZo577GP6u1BdDIBqiAEQqU2pD1Z7PoSAqj80J919C97afaZa1+GsfyG6QzreViAAAHovDxQUG6s8DgB8+MSdyM4vqnYQCgB+3lpAA+QVGiw+78gHTFX3JcjHGyPW/Gjzmjw9NCgxWv54UerDrj6obhb4sTsisHz7KTVOuUY+fOJOxLUKrvbrGQDVEAMgUpOSH6w6Tw8Ulljez55/lSmlSYA3PDQaZOYUWj2XYH9vCAFk5RVZ3UepoE6JbMn+01l2BQL2GBcXiQ37z1k9l4m9WmLNnrOKvJetD5iqgm8BoGWwL85m3XTJudR31c0C12ZvPNYRQzo2q/brHfn8ZhE0kUqs/cvuYNq1KoMfAHYFPwCsBj9A6YeZtYBEaZdzLQc1pudy9YbtfTKyCzD74xSLf/AFSj+kE7/4FYCmxvvM35KK/jFhVoemLucqFzRaCn6kcwGgWPADQD5va8Mm87ekVnkuSgU/ts6lrteOAdWru8vMLsCU945ixchOWPDliToV/ABAkwC9y96LARCRCqr6l11VQYtaGvh4ITu/2C3+2FYV/NkT1Nm7T0Z2AQ6mXbM4NNUkQIcmATq7zreRnzf+yiuyeu+kzIqrHD33F7QeGrxSYQhVGjaxFXwDQKDeE7kFJRbPWwOgoZ8XruUV2zzO+Ws33WI405Q7zKrsHxNmMxCd/sEx1OQvhWkG+FJOgdXvpSv3CQsqD8RdgUNgFnAIjJzJ1hBDaKAOl+zIzFT1werIh5A9ZvW7HUnbTwIw/7B29Ye3qz3QPhxf/ZRRrWusOGQHVL53ADC+R0us23fW5vGqCkLt+YBR0uM9W2LdD2cBWL4mqUYtM7t656LW7CJXzVqz9TdgcPswbPkpU7H3q/h7aunewU32ceUsMHaCrqcMRoH9p7Pwecqf2H86CwYrxYqkLINR2PyXna3gR4PSP8ovD4mVv674PAC8PCQW4UH6Ss+b7hcWqENYYNX7hAfpMb3PrVg1ujPCgszT02FBeqwc2UmR97Fnn0Z+XlaedY4vbQQ//npPaGD9e5AwOAb3tw+3eu9Wje6M+LZhdp3L33pGmR274nslPtgWiQ/GWN1HA+CxOyKgRDKjf0xYldd0f/umSBhc9bnExzSxenzpnid+8SsSv6j698WefeZvSYXBKKr8uycFJRUzYNKQ07ZfMuRt9vz9tLaPPX8DlAx+ZvW73er3aWBsOAbGVv3z6ep9XIkZIAvqegaIvTnUY2/h7KS7o7B6dxqAqv+lZG+RZFXHAez/V5m14QGl3sfWPrYyC0ql4wHAS6tBscH2n8dZ/W7HR4fSqz1tXyp6r+qapBlTyamZNRoKsncGlzWOTNt39rk4qqrvk72tHtzhe2DKVhZYOmcAbtXl2ZnDjJwFVkN1OQBSsikbOe7zlD8x46MUm/u98VhH6Dw9FOmH46r6CVfVcrgq2Hq8Z0v8p2yYpypvPNYRD7RvWqM/6PZck60g1JS1fez9+ZPeW4lhCiXOxVmkaxwQE4pvUi/Z3P+pPq3w7x2nqz0cJwA0a+CDP6/n23wvW0Oe9gyv1se/5wyAaqiuBkD2NjBjbw7nsTcDJE0PVupfSq76V5mr/oXoimDL3n+pKzWV2xWZWXt//uzNarniXGoLpdtKVFV3B7DbtjUMgGqorgZAjn74Us1U/BC/o2VDvHfgHBK/SLX6Ggah9nN2sOXI0JRS3ytnz0By5JoA28Mmzj4XpYYz3U2QjxdybGR37B1uA2rf9H9nYh8gssjeviVK9jepryz9q6xi80JrQwwJg2Pq7R8vR2g9NDYD9Zrso/XQIGFwDKa8d9Rl3yt7zremx3fkmtQ+l8QH2wJAjfaxNyiyNeQU5OOF6/nKzKoc1rkZ1v1w1ub3YGBsOPrHhNkMbpz9c1NXcRZYPWJvgylXNqKqi6zNJpGCn0c6N8OqUe4zE4Ksc7dZK0pwp2tyxeyiWf1us+tcbM2y+1vPlvZelk22ZtGZfg+k4GZIx2aIaxXMfxwpiENgFtTVITA1Uvr1jT3LWIS7aIiBlFMXhxjc6ZqcOZwJQJFZdtJMsZoO2Tkyi44cxxqgGqqrARDg2GwTchzrrIjcj1Kz7JRuK0HKYyNEskpKFYcGqp/+rotYZ0XkfhwZ9qtqyKk2Nvsj65gBsqAuZ4Ak128WoeOCZABAn+jGWDP2DqZeFcAMEJH7qm1tJchxnAVGNpl2uNV7afmLqZBuUY0QHqS32WvJlQv+EVEppWZLKTUDkdTFIbB6qqDYIP//9ZvKTO2k8qm9lnCaOxGR+2AAVE+ZBkDZCvW2oFJdWzayuOAkawCIiNwHh8DqKdOGfMwAKevrXzJhFEC7ZoF47v4Y1gAQEbkhBkD1VL5JBiiHGSBFfXn8IgBgcIemrAEgInJTHAKrp0yHwHILS1BsMFaxN9krM7sAB89eAwAMat9U5bMhIiJrGADVU6YZIIBZIKV89XMGhAC6RjZEswY+ap8OERFZwQConiqoEACxEFoZX/5UOvz1QHsWOhMRuTMGQPVUYbH5kJdSqxzXZ+ev3cSx9Ovw0AD3MwAiInJrDIDqqYpDYMwA1dyXP2UAAO68JRhNAvQ29iYiIjUxAKqnKg2BcSp8jUnDX4M7sPiZiMjdMQCqp5gBUtbpKzfw68UceHpoMLBtmNqnQ0RENrAPUD1VULEGqJ5kgJy1QOGXx0uHv+66LQQN/bxrfDwiInIuBkD1VH2cBbbtlwzM35JqtlBpeJAeCYNjarQ8hRACW6ThL/b+ISKqFTgEVk9JAVCArjQGvp5fpObpON22XzIw5b2jlVZpz8wuwJT3jmLbLxnVPvbvl3Lxx+Ub8NZ6oH/b0JqeKhERuYDqAdDKlSsRFRUFvV6PLl26YM+ePXa97ocffoCnpyc6duxotn3NmjXo1asXGjZsiIYNG6Jfv344ePCgE868dpMCoNCg0tlKdbkRosEoMH9LKoSF56Rt87ekwmAU8v77T2fh85Q/sf90lrzdmi1lS1/c07oxAvVeCp45ERE5i6pDYBs3bsTMmTOxcuVK9OzZE2+//Tbuu+8+pKamokWLFlZfl52djbFjx6Jv3764dOmS2XM7d+7EiBEj0KNHD+j1eixZsgTx8fH49ddf0axZM2dfUq0hFUGHBerxx+UbdboG6GDatUqZH1MCQEZ2AQ6mXUN2fpFDw2RCCHn6O2d/ERHVHqpmgJYtW4YJEyZg4sSJaNOmDZKSkhAREYFVq1ZV+bpJkyZh5MiRiIuLq/Tc+++/j6lTp6Jjx46Ijo7GmjVrYDQa8d133znrMmolqQg6NLA0A1SXa4Au51oPfkxtPJTu8DDZz39m41zWTfh4adG3TRNFzpeIiJxPtQCoqKgIR44cQXx8vNn2+Ph47Nu3z+rr1q1bh9OnTyMhIcGu97l58yaKi4vRqFGjGp1vXSMNgYUF6QDU7U7Q9jYl/Czlot3DZBJp+Ktvmybw9eacAiKi2kK1v9hXr16FwWBAaKh50WhoaCgyMzMtvubUqVOYM2cO9uzZA09P+059zpw5aNasGfr162d1n8LCQhQWFspf5+Tk2HXs2kyuAZIyQDeLIYSARlPzKeHupltUI4QH6ZGZXWAxwAEAL60GxQbrtT6mw2RxrYJhMAocOJOFjw9fAAAMaselL4iIahPVi6ArfuBa+xA2GAwYOXIk5s+fj9tvv92uYy9ZsgQffvghNm/eDL3eehZg4cKFCAoKkh8RERGOXUQtVHEIrMhgrNQbqK7QemiQMDjG4nOassfYOyPtOtbl3AJs+yUDdy3egZHvHJAzZ/O3/FqjmWRERORaqgVAISEh0Gq1lbI9ly9frpQVAoDc3FwcPnwY06dPh6enJzw9PbFgwQIcP34cnp6e2LFjh9n+S5cuxauvvopvv/0W7du3r/Jc5s6di+zsbPlx/vz5ml+gm5OKoEP8veFZ1giwLk+FHxgbjlWjO6ORr3mTwrAgPVaN7ox+MfZ1b17x/R+YbKFO6FJOYY2n0xMRkeuoNgTm7e2NLl26IDk5GQ899JC8PTk5GUOGDKm0f2BgIH7++WezbStXrsSOHTvwySefICoqSt7+2muv4eWXX8Y333yDrl272jwXnU4HnU5Xg6upfaQhML2XFkE+XsjKK0J2fjHCg3xUPjPnGRgbjqISI/7+UQpaNfbDy0PbyZ2gDUZhc5gMAE5eumFxu0BpJmn+llT0jwlTpLs0ERE5j6pDYLNnz8Y777yDtWvX4sSJE5g1axbS09MxefJkAKWZmbFjx5aeqIcHYmNjzR5NmjSBXq9HbGws/Pz8AJQOe82bNw9r165Fy5YtkZmZiczMTNy4YfmDq74yC4B8S3vX1OWp8JLcwhIAQFSIP+JaBcuBiukwWcXQRRomG9Wt6qFR0zohIiJyb6oGQMOHD0dSUhIWLFiAjh07Yvfu3di6dSsiI0vrMTIyMpCenu7QMVeuXImioiI88sgjCA8Plx9Lly51xiXUWlK9j5QBAur2VHhJTn5pACRdsylpmCwsyLxeTBom63ZLsF3vYe+0eyIiUo/q83anTp2KqVOnWnxu/fr1Vb42MTERiYmJZtvOnj2rzInVYQajQJGhNADy8dKigRQA1YMMkBTkBfpY/tEfGBuO/jFhFhdM3X86y673sHfaPRERqUf1AIhcr7CkfCFUvZcHGpQVBteLDFBB6TVaygBJtB4axLWqnO2xNZ1eg9JsUbco9pwiInJ3qk+DJ9fLLzIJgDzLh8Dq8iwwiRTkVRUAWWOrTggAEgbHsACaiKgWYABUDxWUlA5/eXt6wMNDU89qgMqGwKq5aKmtOiFL64UREZH74RBYPSRlgPSepfGvnAGqBzVAOTXIAEmqqhMiIqLagQFQPSRNgffx1gIAGvjWnwxQeRF09QMgwHqdEBER1Q4cAquHpCJovVdpAFSvhsAKrE+DJyKi+oMBUD2UX1Q+BR4ozwDV9SEwIYTNafBERFQ/8FPAhQxG4RZ1I9IQmK6eZYBuFhlgMJZOYGcGiIiofmMA5CLbfsnA/C2pZotohgfpkTA4xuUzh6SFUMuLoEv7AOUUFMNoFPCoo8W8UoDn6aGRs19ERFQ/cQjMBbb9koEpFlYQz8wuUGUF8YpF0FI2RAggt6xGpi4ybYKo0dTNII+IiOzDAMjJDEaB+VtSLXYOlrbN35IqD824gtQHSO9ZGgB5e3rAtywYqsvNEKWlPmo6A4yIiGo/BkBOdjDtWqXMjyk1VhAvKDLPAAH1ow5ImgHGAIiIiBgAOZm9K4O7cgVxaQhM71X+7a8PzRBrsgwGERHVLQyAnMzelcFduYK4VASt86xnGSB5GQzW/hMR1XcMgJxMWkHcWsmtBqWzwVy5gnhBcVkfIJMhMLkXUB0OgJgBIiIiCQMgJ3PHFcQLpE7QJhmgBtJU+HoQALEGiIiIGAC5gLSCeGige6wgXl4EbVIDJHeDrruzwEynwRMRUf3GYggXkVYQbz3va5QYBf49ohPuaxeuTifoCmuBAfWtBogBEBFRfccMkAtpPTTw05XGnNHhAaoEPwCQX1R5CKw+zALLyedCqEREVIoBkIv5lRUe3ywLQtQgFUHr62kRNBdCJSIiBkAuJs28yitUMQAqMV8LDCjPitTlImjWABERkYQBkItJQ2D5xeqtuSUPgXlVngVWl4fAslkDREREZRgAuZi0CrmaGaDCksp9gOp6EXSxwSgPOzIDREREDIBcTM4AqVoDZKEIuqwGKL/YgMIS9c7NWUyH9gLYCZqIqN7jJ4GLyTVARSoOgRVX7gMUoPOERgMIUZoFahKgtfZyVRiMAgfTruFybgGaBJR2znZkFp2U2fLXecJTy7ifiKi+YwDkYr5e7jALrPJaYB4eGgT5eOH6zWJk3yx26dpktmz7JQPzt6QiI7t8wdjwID0SBsfY3URSWgmew19ERARwCMzlpCGwmyplgIQQ5dPgvcyzPO5YB7TtlwxMee+oWfADAJnZBZjy3lFs+yXDruNI18ThLyIiAhgAuZyPyn2ApAJo03ORNHCzZogGo8D8LakQFp6Tts3fkgqD0dIe5nK4ECoREZlgAORiciNElWaBScNfgHkfIKB8kVB3yQAdTLtWKfNjSgDIyC7AwbRrNo/FhVCJiMgUAyAX8/EuGwIrVicAkgqgvbSaSsXADXzLegG5SQB0Odd68OPofmyCSEREphgAuZiUAcpXqQZIrv/xrDzLK6hsiQh3yQDZW4htz35sgkhERKYYALmY2kthSP2HdF6VAyCpG3T2zSKXnpM13aIaITxID2uT3TUonQ3WLaqRzWNxIVQiIjLFAMjF/FQeApPWATPtASRxtwVRtR4aJAyOAYBKQZD0dcLgGLv6AeVwIVQiIjLBAMjFfOUiaLWGwCp3gZa4WxE0AAyMDceq0Z0RFmQ+zBUWpMeq0Z0d6APEGiAiIirHAMjFfOU+QOrOAqs4BR5wv2nwkoGx4dj7bB/460rP2V+nxd5n+9gd/ADlQR0DICIiAhgAuZycAXLLIujS4CDHjTJAEq2HBkUlpf1+bhQaYBS2e/+Y4jR4IiIyxQDIxXxVboRYXgRtqQbIvabBmyoqMaLIUN7E8VqeY4XabIRIRESmGAC5mG9ZEXRhidGuDsZKk4ugLcwCM10KQziYYXG2vAo1U1dyC+1+rRBCXguM0+CJiAhgAORyvia1N2oMg1lbBwwonwVmMArcUKlI25qK53P1hv0BUF6RQQ42mQEiIiKAAZDL6Tw9IM3aVmMYTC6CthAA6b208C5bHsOdZoIBQF5RxQDI/iEw6Vq8tBroLQz9ERFR/cNPAxfTaDTlvYBUDICsBQLuOhOs4hCYIxkg0/ofjcZ2zyAiIqr7GACpoLwbtOuHmaQiaEtDYID7zgS7UaFz9lUHaoC4DAYREVWkegC0cuVKREVFQa/Xo0uXLtizZ49dr/vhhx/g6emJjh07Vnpu06ZNiImJgU6nQ0xMDD799FOFz7pm/Mp6AeWr0A1aKoK2FgC5WzdoiRIZIE6BJyIiiaoB0MaNGzFz5kw8//zzOHbsGHr16oX77rsP6enpVb4uOzsbY8eORd++fSs9t3//fgwfPhxjxozB8ePHMWbMGDz66KM4cOCAsy7DYVL9jRoZoKqKoAHzmWDupHIRtOM1QAyAiIhIomoAtGzZMkyYMAETJ05EmzZtkJSUhIiICKxatarK102aNAkjR45EXFxcpeeSkpLQv39/zJ07F9HR0Zg7dy769u2LpKQkJ12F4/x00orwrs8A5ctF0Ja/9UFlC6K6aw1QoL40e+ZQBqiAC6ESEZE51QKgoqIiHDlyBPHx8Wbb4+PjsW/fPquvW7duHU6fPo2EhASLz+/fv7/SMQcMGFDlMQsLC5GTk2P2cCafsiLoPBUCoMJi+2qArue7x4rwEikAahniB8CxAKh8GQwuhEpERKVUC4CuXr0Kg8GA0NBQs+2hoaHIzMy0+JpTp05hzpw5eP/99+HpafnDLDMz06FjAsDChQsRFBQkPyIiIhy8Gsf4eUsZIBWKoG0EQFINkLsWQUcGlwZA1/KK7G4kmcMiaCIiqkD1IuiK05KFEBanKhsMBowcORLz58/H7bffrsgxJXPnzkV2drb8OH/+vANX4Dh5Fpgq0+DtqwFy1yGwiIY+0GgAo7B/OQwug0FERBWpNiYQEhICrVZbKTNz+fLlShkcAMjNzcXhw4dx7NgxTJ8+HQBgNBohhICnpye+/fZb9OnTB2FhYXYfU6LT6aDT6RS4Kvu4dR8gX/csgpYCoCAfLzT09ca1vCJcvVGIxgG2v28sgiYioopUywB5e3ujS5cuSE5ONtuenJyMHj16VNo/MDAQP//8M1JSUuTH5MmT0bp1a6SkpKB79+4AgLi4uErH/Pbbby0eUy3ygqhq9AGytwbIzTJA0iwwP50nQvxLC7XtrQPKKWAGiIiIzKlaFTp79myMGTMGXbt2RVxcHFavXo309HRMnjwZQOnQ1J9//okNGzbAw8MDsbGxZq9v0qQJ9Hq92fYZM2bg7rvvxuLFizFkyBB8/vnn2L59O/bu3evSa6uKtCDqTRX6ABWWDYFZWgoDcN9p8NJSGP46T4T463Dy0g27AyA2QiQioopUDYCGDx+OrKwsLFiwABkZGYiNjcXWrVsRGRkJAMjIyLDZE6iiHj164KOPPsK8efPwwgsvoFWrVti4caOcIXIHamaACmwWQZdmV9wtAJKKoP3KAiAAuJprbw0Qp8ETEZE51ecFT506FVOnTrX43Pr166t8bWJiIhITEyttf+SRR/DII48ocHbOIRVBq1EDlF/FYqhAeZBwo7AExQYjvLSq18kDKK8B8tNpywMgRzNAnAZPRERl3OPTrZ6RGiG6OgASQtgsgpYaDQLuNRVeCoD8dZ4ICSjNUl2xIwAqKjHKQR8zQEREJGEApAIfL2kWmGuHwIoMRkitc3RWMkCeWg8ElK1V5k7DYOZF0FIGyPYQmFQADQABrAEiIqIyDIBUoFYGSOoBBFgfAgOAIDdbEFUIYZYBaizXANnOAElBXIDOE1oP672giIiofmEApAJflWqApGUwPDSAl9Z6MOBuM8EKisszV+YZINsBEFeCJyIiSxgAqcBXpUaIpgXQVXXGlpshukkvINOV4H29tHINUFZeEYw2lsNgE0QiIrKEAZAKyjNArq0BsrUMhqS8GaJ7LIgqzwDz1sLDQ4Ngv9IMkMEobA7Tla8EzxlgRERUjgGQCqQMUH6xwWYGQ0m2ukBLgnykXkCu71NkiWkBNAB4e3rIQZqtYTA2QSQiIksYAKlAygAJARSUuG4YzNYUeImcAcp3rwyQv648iyMvh2GjEJoLoRIRkSUMgFRgOgPLlXVAtrpAS9xtQVRpGQw/swCodBjMVi8gFkETEZElDIBU4OGhkYOgm4WuD4CqmgIPmMwCc5siaGkZjPLzDgmwrxcQF0IlIiJLGACpRO4FVOy6Oht7i6AbuNk0eEtDYI3tnApfXgPEImgiIirHAEgl0npgeS7MAOU7XAPkXgGQX7VqgMpmgfkyA0REROUYAKnET5oJ5oY1QEFuVgNUcRYYALubIXIWGBERWcIASCVyBsiFvYDsHgLzLZsGf7MYQrhumr41lmeB2VcDlM1ZYEREZAEDIJWokQHKd7AIushgNFs/TC1yEbS3SQAUYF8GiEXQRERkCQMglaiRASq0swbIz1sLz7KFQ92hF1B5DZDJLLCyGqCsG0VWs1RGo+A0eCIisogBkEr8ygIgNTJAtobANBqNWy2IWtUQWJHBKBc6V3pdUYm8iCozQEREZIoBkEp8yoZzXDkLzN4iaKC8EPq6G/QCslQErffSIqDsa2vNEKXgzVvrAZ0nf9SJiKgcPxVUImWA3LEPEGC6IKr6AZA0TGiaAQJs1wFJmaFAHy9oNBonniEREdU2DIBUIq8Ir0IfIFtF0EB5M8QctxgCkzpBVwiApF5ANjJAgVwJnoiIKmAApBLfsg9zddYCs/1td6cFUW9YKIIGTKbCW2mGyBlgRERkDQMglcgZIJfOArN/CEzuBeQWGSArQ2A2egGxCSIREVnDAEglvt6uzwA5MgQW6CY1QEajkO9R5SGw0gAoK89aDRAzQEREZBkDIJWokQGShsB0dgyBucuCqKZ9kioXQZdmqa7kWs4AMQAiIiJrGACpxEcOgNyvDxAAt+kDJBVAaz00laay21oPjEXQRERkDQMglfipMAQmTYO3axaYmyyIKhdAe2srTWW3FQDlFJStBM8MEBERVcAASCXqFEE7ngFSuwbIWgE0ADQ2CYAsLYfBImgiIrKGAZBKfFUcAqtNGaA8C12gJVINUEGxEXkW7iNrgIiIyBoGQCoxnQVmbTFPJRUbjCgpWxjLvj5ApcFFTkExjEbnn581lpbBkPh6e8qBpKVeQNlcCJWIiKxgAKQS37KmfgajQJHB6PT3k2aAAY4NgQkB5Ba4bpiuImvLYEiqqgNiI0QiIrKGAZBKfE2CEFcshyEVQAOwa2FQb08PObuiZjfoG/IyGJaDtqqWw2ANEBERWcMASCWeWg94lwUiN4tdEQCVL4Nh78Kg7lAIXVUNEFCeAbpSoRt0YYlBDvqYASIioooYAKmofEFU5w8xFThQAC1xh15AVc0CA0xWhK9QAyStBA8A/nr2ASIiInMMgFTkyl5ABQ6sAyYpXxBVvQCoqiJowHoNkFT/E6D3hNbDvowXERHVHwyAVCR1g85zQS8gR7pAS9xhKrytDFBjKzVA2ZwCT0REVWAApCK/sgAo3yUZIMcDIHkI7KZ6RdDSUhjSvarI2orwLIAmIqKqMABSUXkGyLVF0PZq4FuaXVEzA2RzCCzAyhAYM0BERFQFBkAqkmqA8l04BFadImh3mAVmsw9QpSJoLoRKRETWMQBSkZwBckEfoMIaFEG7dQaorAYor8hgNpTIhVCJiKgqDIBUJGeAXNAHKL8aQ2ABZUHH6Ss3sP90FgwqLIkhFYhbC4D8dZ5yY0fTYTDWABERUVUYAKmoPAPkuj5A9maAtv2SgflfpgIATl/Jw4g1P+KuxTuw7ZcMp52jJVJ2zNoQmEajMWmGWB4AsQaIiIiqonoAtHLlSkRFRUGv16NLly7Ys2eP1X337t2Lnj17Ijg4GD4+PoiOjsby5csr7ZeUlITWrVvDx8cHERERmDVrFgoKCpx5GdUiLe/gbn2Atv2SgSnvHcW1PPOZVZnZBZjy3lGXBkHlQ2DWz9tSM0QuhEpERFVRtUJ048aNmDlzJlauXImePXvi7bffxn333YfU1FS0aNGi0v5+fn6YPn062rdvDz8/P+zduxeTJk2Cn58fnnzySQDA+++/jzlz5mDt2rXo0aMHTp48ifHjxwOAxWBJTeUrwrtPEbTBKDB/SyosDXYJABoA87ekon9MmNMbDBYbjCgqKQ3crGWAANNeQOUBGxdCJSKiqqiaAVq2bBkmTJiAiRMnok2bNkhKSkJERARWrVplcf9OnTphxIgRaNu2LVq2bInRo0djwIABZlmj/fv3o2fPnhg5ciRatmyJ+Ph4jBgxAocPH3bVZdlNXgrDjabBH0y7hoxs69kyASAjuwAH064peXoWmQ4NWqsBAix3g87mLDAiIqqCagFQUVERjhw5gvj4eLPt8fHx2Ldvn13HOHbsGPbt24fevXvL2+666y4cOXIEBw8eBACcOXMGW7duxaBBg6wep7CwEDk5OWYPV3BlAFRYUhYAeVadAbqca99Qob371YQ0/OXt6QEvrfUf1aoCIGaAiIjIEtX+eXz16lUYDAaEhoaabQ8NDUVmZmaVr23evDmuXLmCkpISJCYmYuLEifJzjz32GK5cuYK77roLQgiUlJRgypQpmDNnjtXjLVy4EPPnz6/ZBVWDS4fAyoIsHysdlSVNAvR2Hc/e/WrCVgG0JMTCchjSYqgMgIiIyBLVi6A1GvM6EiFEpW0V7dmzB4cPH8Zbb72FpKQkfPjhh/JzO3fuxCuvvIKVK1fi6NGj2Lx5M7788ku89NJLVo83d+5cZGdny4/z58/X7KLs5NohsNJaGp2NGqBuUY0QHqSHte+ABkB4kB7dohope4IW2FMADZgWQZfWABmNQq4B4jR4IiKypNoZoP/+97946623kJaWhv379yMyMhJJSUmIiorCkCFDbL4+JCQEWq22Urbn8uXLlbJCFUVFRQEA2rVrh0uXLiExMREjRowAALzwwgsYM2aMnBVq164d8vLy8OSTT+L555+Hh0flmE+n00Gn09l13UrydeFq8PYWQWs9NEgYHIMp7x2FBjArhpaCooTBMS5ZYV2qAZL6JVlTcQjsRlEJRNmJcxYYERFZUq0M0KpVqzB79mzcf//9uH79OgyG0g/XBg0aICkpya5jeHt7o0uXLkhOTjbbnpycjB49eth9LkIIFBaWD33cvHmzUpCj1WohhIAQrm/kVxU5A+TSPkC2v+UDY8OxanRnhAWZD3OFBemxanRnDIwNd8o5VmRrGQxJxT5A2WVLd3h7ejjU+ZqIiOqPamWA3nzzTaxZswZDhw7FokWL5O1du3bFP/7xD7uPM3v2bIwZMwZdu3ZFXFwcVq9ejfT0dEyePBlA6dDUn3/+iQ0bNgAAVqxYgRYtWiA6OhpAaV+gpUuX4qmnnpKPOXjwYCxbtgydOnVC9+7d8ccff+CFF17Agw8+CK3WvT4M5T5ALugEXVA2ndxWEbRkYGw4+seEYUDSLvxxOQ9P978dU++91SWZH4mtZTAkjcsCoNyCEhQUGzgFnoiIbKpWAJSWloZOnTpV2q7T6ZCXl2f3cYYPH46srCwsWLAAGRkZiI2NxdatWxEZGQkAyMjIQHp6ury/0WjE3LlzkZaWBk9PT7Rq1QqLFi3CpEmT5H3mzZsHjUaDefPm4c8//0Tjxo0xePBgvPLKK9W5VKfykYbAXLAWWIGdRdCmtB4ahAbq8cflPEQ08nVp8APYnwEK9PGEt9YDRQYjsvKKTJbB4BR4IiKyrFqfEFFRUUhJSZEDFcnXX3+NmJgYh441depUTJ061eJz69evN/v6qaeeMsv2WOLp6YmEhAQkJCQ4dB5q8C0bnikyGFFiMMKziqneNVVQ4vhaYADg4+W6OqWK8sre01YRtEajQbC/NzKyC3A1t5AzwIiIyKZqBUDPPPMMpk2bhoKCAgghcPDgQXz44YdYuHAh3nnnHaXPsc7yNflgv1lsQKATAyBpGrzOziEwSflyHc6vU6rI3iEwoLQOKCO7AFdvFMrrgLEAmoiIrKlWAPS3v/0NJSUl+Oc//4mbN29i5MiRaNasGd544w089thjSp9jneWt9YDWQwODUeBmocGpU7alImhHhsAA107Vr8jeITDAvBdQbgEzQEREVDWHA6CSkhK8//77GDx4MJ544glcvXoVRqMRTZo0ccb51WkajQa+3lrkFpQ4PcMiF0E7OCtKmqqfVwsyQEDpemBSsMceQEREZI3DYy6enp6YMmWKPPU8JCSEwU8NuCLDYjAKeVFRW32AKpLOL1/FDJBdAVBZM8QruYVcBoOIiGyqVtFJ9+7dcezYMaXPpV7yc0EzRGkdMMDxImg5A+SCmWoVlS+FYTtoM22GmMMAiIiIbKhWDdDUqVPx9NNP48KFC+jSpQv8/PzMnm/fvr0iJ1cfSDU5zhxiMs3e2NsHSCJngIpVHAKz0QkaMK8BkrJcXAmeiIisqdYnxPDhwwEAf//73+VtGo1GXsdL6gxNtkkf7s4cYpLqf7w9PeDhYC+f2lIE3dikBkjK/DADRERE1lS7ESIpQ84AOXE5DHkZDE/HRzx9XdissaLq1ACZrgjPImgiIrKmWgFQxQaIVH1Sn518Jy6HkV+NLtASX3m5jtoxC+z6zWJ4aEqzXOwDRERE1lS7SOL06dNISkrCiRMnoNFo0KZNG8yYMQOtWrVS8vzqPKnTsjOLjAvlLtDVCIC8pAVbXZsBEkLInaDtGQJr4OMl91S6llcEgENgRERkXbVmgX3zzTeIiYnBwYMH0b59e8TGxuLAgQNo27ZtpdXdqWpyBsipRdCOLYRqytcFs9QsKSwxwmAUAGwvhQEAHh4aBPt5m21jBoiIiKypVgZozpw5mDVrltlK8NL2Z599Fv3791fk5OqD8llgTiyClmqAajAE5upGiDdMaqLsmQUGlA6DXc4trQHSaIAAOzJHRERUP1UrA3TixAlMmDCh0vbHH38cqampNT6p+sQVfYDkhVCrVQRd3ghRCKHoeVVFKoD29dbaPXNNKoQGSoMfR2e8ERFR/VGtAKhx48ZISUmptD0lJYVdoR1UPs3c+X2AqlUEXRaglRgFigxGRc+rKo4UQEukXkAAh7+IiKhq1RojeOKJJ/Dkk0/izJkz6NGjBzQaDfbu3YvFixfj6aefVvoc6zRX1NjI64BVqwao/DX5RQaHV5OvrvIu0Pb/iEq9gAAWQBMRUdWqFQC98MILCAgIwOuvv465c+cCAJo2bYrExESz5ohkmysyQIVSDZCDy2AAgJfWA95aDxQZjLhZZEADX6XPzrLyHkD2B1whDICIiMhO1QqANBoNZs2ahVmzZiE3NxcAEBAQoOiJ1Reu6LRckyEw6XVF+Uanr1hvypFlMCTBpkNgbIJIRERVqFYNUFpaGk6dOgWgNPCRgp9Tp07h7Nmzip1cfeCKTstSEXR1h6/8VFgOw5FlMCTMABERkb2qFQCNHz8e+/btq7T9wIEDGD9+fE3PqV5xRadlqQ9QTTJAgGtXhK9OEXRD3/IM0I3CYrmPEBERUUXVCoCOHTuGnj17Vtp+5513WpwdRtbJQ2AuyABVpwgaKM9SuXJFeCnYsjcA2vZLBia8e0j++qufM3HX4h3Y9kuGU86PiIhqt2oFQBqNRq79MZWdnc2V4B3kkj5ANSiCBsqDNFdmgKTGi/52FEFv+yUDU947KjdBlGRmF2DKe0cZBBERUSXV+kTs1asXFi5caBbsGAwGLFy4EHfddZdiJ1cfSMNL+cUGGJ00ZCMFQNUdAjNthugq9g6BGYwC87ekwtKdk7bN35LK4TAiIjJTrVlgS5Yswd13343WrVujV69eAIA9e/YgJycHO3bsUPQE6zrTWU75xQaHal7sVVBc/T5AAOBbdk6uXA7D3iLog2nXkJFdYPV5ASAjuwAH064hrlWwkqdIRES1WLUyQDExMfjpp5/w6KOP4vLly8jNzcXYsWPx22+/ITY2VulzrNP0Xh7QlK3Y4KwAQ8rcVGctMMBkRXgVZoHZCggv51oPfqqzHxER1Q/VTjc0bdoUr776qpLnUi9pNBr4emmRV2Rw2hBTTdYCA8qDEFX6ANkIgJoE6O06nr37ERFR/eDQJ+K1a9dw4cIFs22//vor/va3v+HRRx/FBx98oOjJ1Rc+Ti6ElofAvGo2Dd61GSBpKYyqz7lbVCOEB+lhbdlTDYDwID26RTVS9gSJiKhWcygAmjZtGpYtWyZ/ffnyZfTq1QuHDh1CYWEhxo8fj//+97+Kn2Rd5+zlMGpaBO2nQhF0np2doLUeGiQMjgGASkGQ9HXC4BhouTI8ERGZcCgA+vHHH/Hggw/KX2/YsAGNGjVCSkoKPv/8c7z66qtYsWKF4idZ1zl7OQx5Gnw1i6ClDFWeG84CA4CBseFYNbozwoLMh7nCgvRYNbozBsaGO+UciYio9nKoBigzMxNRUVHy1zt27MBDDz0ET8/Swzz44INYuHChsmdYDzi7z06+Qn2A8t1wFphkYGw4+seE4WDaNVzOLUCTgNJhL2Z+iIjIEocCoMDAQFy/fh2RkZEAgIMHD2LChAny8xqNBoWFhdZeTlZIWQ5ndVoub4RYsz5ArmqEaDQKOdvkSFsArYeGU92JiMguDqUEunXrhn/9618wGo345JNPkJubiz59+sjPnzx5EhEREYqfZF3n4+W8AEMIUeMiaHnB1mLXBECm7+PIYqhERET2cujT5aWXXkK/fv3w3nvvoaSkBM899xwaNmwoP//RRx+hd+/eip9kXSdngJxQY1NYYpT/v6ZF0DcLXTMEJg1/eWiqP2xHRERUFYcCoI4dO+LEiRPYt28fwsLC0L17d7PnH3vsMcTExCh6gvWBvNq6E2psCkyyKdXtA+TqafCmBdAaDWt4iIhIeQ6PLzRu3BhDhgyRv75w4QKaNm0KDw8PDBo0SNGTqy+cOc1cKoD29NDAU1s7GiE6WgBNRETkqBqPL8TExODs2bMKnEr9VT7N3BkZoNIhMJ9q1v+YvlaNDBAREZEz1DgAEoKrbNeUnxOHmKQhMF0NAiApECksMbpkVXWpGJwBEBEROQsrTN2A3AjRCbPA8uUu0NX/VvuaFE+7YhisfAis+kEbERFRVWocAD333HNo1IjrLNWEM6eZ17QLNADoPD0g9RN0xXIYN+xcBoOIiKi6avwJM3fuXCXOo17zdeI088Ia9gACylas9/bEjcISlyyHwSJoIiJyNkWHwM6fP4/HH39cyUPWC746560GLw+B1SAAAkynwrtuCIw1QERE5CyKBkDXrl3Du+++q+Qh6wVnrgZfXgRds2+1Mwu1K7rBImgiInIyhz5hvvjiiyqfP3PmjMMnsHLlSrz22mvIyMhA27ZtkZSUhF69elncd+/evXj22Wfx22+/4ebNm4iMjMSkSZMwa9Yss/2uX7+O559/Hps3b8Zff/2FqKgovP7667j//vsdPj9XcOZq8MplgJyXpaqIRdBERORsDgVAQ4cOhUajqXLquyOdezdu3IiZM2di5cqV6NmzJ95++23cd999SE1NRYsWLSrt7+fnh+nTp6N9+/bw8/PD3r17MWnSJPj5+eHJJ58EABQVFaF///5o0qQJPvnkEzRv3hznz59HQECAI5fqUr5ODC5qug6YxJXLYdwo4hAYERE5l0PjIuHh4di0aROMRqPFx9GjRx1682XLlmHChAmYOHEi2rRpg6SkJERERGDVqlUW9+/UqRNGjBiBtm3bomXLlhg9ejQGDBiAPXv2yPusXbsW165dw2effYaePXsiMjISd911Fzp06ODQubmSn8kQmNJ9lcpXgq/ZEJgrl8NgDRARETmbQ5+KXbp0qTLIsZUdMlVUVIQjR44gPj7ebHt8fDz27dtn1zGOHTuGffv2mS3A+sUXXyAuLg7Tpk1DaGgoYmNj8eqrr8JgcE0X4+qQggujMF+8VAkFCg2B+blwRXjOAiMiImdz6BPmmWeeQV5entXnb731Vnz//fd2Hevq1aswGAwIDQ012x4aGorMzMwqX9u8eXNcuXIFJSUlSExMxMSJE+Xnzpw5gx07dmDUqFHYunUrTp06hWnTpqGkpAQvvviixeMVFhaisLBQ/jonJ8eua1CKr0m/m5tFhhoPV5kqzwDV7JjOnKpfEYugiYjI2Rz6hGnWrBmioqKsPu/n52eWjbFHxZohIYTNOqI9e/bgxo0b+PHHHzFnzhzceuutGDFiBADAaDSiSZMmWL16NbRaLbp06YKLFy/itddesxoALVy4EPPnz3fovJWk9dBA5+mBwhIj8gpL0MjPW7Fj5ysVAOlcPwTGImgiInIWh4bAbrvtNly5ckX+evjw4bh06VK13jgkJARarbZStufy5cuVskIVRUVFoV27dnjiiScwa9YsJCYmys+Fh4fj9ttvh1Zb/uHZpk0bZGZmoqioyOLx5s6di+zsbPlx/vz5al1TTUjZjnyFh5iUKoIuL9RmHyAiIqr9HAqAKtb3bN26tcohsap4e3ujS5cuSE5ONtuenJyMHj16OHROpsNXPXv2xB9//AGjsbyW5uTJkwgPD4e3t+XMik6nQ2BgoNnD1aQanTyFh5gUK4J24YrwXAqDiIicTdXFUGfPno133nkHa9euxYkTJzBr1iykp6dj8uTJAEozM2PHjpX3X7FiBbZs2YJTp07h1KlTWLduHZYuXYrRo0fL+0yZMgVZWVmYMWMGTp48ia+++gqvvvoqpk2b5vLrc4Rf2XCP0mttKVYE7aIhsBKDUS4EZxE0ERE5i0OfMBqNplJ9jiN9fyoaPnw4srKysGDBAmRkZCA2NhZbt25FZGQkACAjIwPp6eny/kajEXPnzkVaWho8PT3RqlUrLFq0CJMmTZL3iYiIwLfffotZs2ahffv2aNasGWbMmIFnn3222ufpCs5qNKjUEJiPi4bA8grLr59DYERE5CwOfcIIITB+/HjodDoAQEFBASZPngw/Pz+z/TZv3mz3MadOnYqpU6dafG79+vVmXz/11FN46qmnbB4zLi4OP/74o93n4A6kXkB5CgcY+QoNgblqKQypCaK31gPenqomKImIqA5zKAAaN26c2demQ09UM9I0c2cNgSk2Dd7JAVB5ATRngBERkfM4FACtW7fOWedR70lDTHluGwCVnZ+T+wDd4AwwIiJyAY4xuAk/OQOk9Cyw0hqgmhZByxkqJ3eCZhdoIiJyBQZAbsJHrgFy7wyQ64bAGAAREZHzMAByE1LPG6VrgJQqgnbVUhhcBoOIiFyBAZCbkDNACgYYQgjF+gDJS2EUGxRfsd4Ul8EgIiJXYADkJuRp5grW2BQbBIxlsYpOoSEwIcrripyBXaCJiMgVGAC5CbnGRsEMkGnBck0zQKavd2YzRNYAERGRKzAAchPOWG29sCwA8tAAXtrqd+wGSlesl+qInFkIzVlgRETkCgyA3IQzGg3mm8wAq8mSJRJXzARjETQREbkCAyA34euEtbaU6gEk8XXSch2mWARNRESuwADITTgjA6RUDyCJs5brMCUFV8wAERGRMzEAchPOGF5SqgeQxDVDYAyAiIjI+RgAuYnyDJCSQ2DOyQC5YhYYi6CJiMiZGAC5CanvTbFBoKhEmT47Ug2QcgGQ8zNAeSyCJiIiF2AA5CakTtCAcjU2SnWBlvg6oVt1RTdYBE1ERC7AAMhNeHt6yL16bhYrE2AUKF4D5NwiaCEEGyESEZFLMAByI1KmRhoGqql8xWuASoMSpVeslxSWGFFStnYHAyAiInImBkBuRPrQV24ITOkaICkD5JwhMNOhNa4FRkREzsQAyI34KNxoUPEhMJ10fs7JAEmZLx8vLbQeNe9cTUREZA0DIDciZT3ctgjay7k1QOwBRERErsIAyI04LwOkUACkU365DlPSdXMGGBERORsDIDfip/ByGMoXQTt3CIwZICIichUGQG7EV/EhMGWLoJUeoquIU+CJiMhVGAC5EaVXW1e6CFrpIbqKuAwGERG5CgMgN6J0o8F8hYugnZ0BusFlMIiIyEUYALkRH6nRoEKNEAsVHgLzcfJSGHlcBoOIiFyEAZAbkYqg8xVaCiPfWUthFDu5BohNEImIyMkYALmR8gyLsn2AlC6CVnLFelOcBUZERK7CAMiN+Ml9dhQKgEqUDYCcsWK9KRZBExGRqzAAciO+ch8ghYbAikqzNEoVQTtjxXpTLIImIiJXYQDkRqQ+QEplgAoVHgIDlF+x3lR5HyAWQRMRkXMxAHIjimeAFC6CBpRfsd5U+VIYzAAREZFzMQByI74KLoVRYjCixCgAKDcEBji3GSKLoImIyFUYALkRJYfACkxmaSk5BObMZogsgiYiIldhAORGlBwCMw1QdJ7KfZudmQHKYxE0ERG5CAMgNyIFQAXFRhjKhq+qy3QdMI1GU+Nzkyg5TGdKCCEHVSyCJiIiZ2MA5EZMMx817bZcqHAPIIk0BHZT4eUwbhYZIMpiPg6BERGRszEAciM6Tw9IyZqaBhhK9wCSSENgNxVeDkOq//HQKH/OREREFTEAciMajaY8w1LDISalu0BLpPXKbircB+iGyTpgSg7ZERERWcIAyM0oVWQsFUErHQD5KNysUcICaCIiciUGQG5GXhG+phkgJzRBBJRfsV6Sk18MADAKgf2ns2pcBE5ERFQV1QOglStXIioqCnq9Hl26dMGePXus7rt371707NkTwcHB8PHxQXR0NJYvX251/48++ggajQZDhw51wpk7h5RhyavxEFhpDZDe0zk1QEouhbHtlwxM//AoAOBybiFGrPkRdy3egW2/ZCj2HkRERKZUDYA2btyImTNn4vnnn8exY8fQq1cv3HfffUhPT7e4v5+fH6ZPn47du3fjxIkTmDdvHubNm4fVq1dX2vfcuXP4xz/+gV69ejn7MhRVngGqWYaloCyAMl3BXQlKr1i/7ZcMTHnvKP66WWy2PTO7AFPeO8ogiIiInELVAGjZsmWYMGECJk6ciDZt2iApKQkRERFYtWqVxf07deqEESNGoG3btmjZsiVGjx6NAQMGVMoaGQwGjBo1CvPnz8ctt9ziiktRjFIZlvIiaGW/xUo2azQYBeZvSYWlwS5p2/wtqRwOIyIixakWABUVFeHIkSOIj4832x4fH499+/bZdYxjx45h37596N27t9n2BQsWoHHjxpgwYYJdxyksLEROTo7ZQy3yLLAaTjN3VhG0kst1HEy7hozsAqvPCwAZ2QU4mHatxu9FRERkSrUpN1evXoXBYEBoaKjZ9tDQUGRmZlb52ubNm+PKlSsoKSlBYmIiJk6cKD/3ww8/4D//+Q9SUlLsPpeFCxdi/vz5Dp2/s8gZlhr2ASooLqsBUjwAUi4DdDnXevBTnf2IiIjspXoRdMWeL0IIm31g9uzZg8OHD+Ott95CUlISPvzwQwBAbm4uRo8ejTVr1iAkJMTuc5g7dy6ys7Plx/nz5x2/EIXovUu/JcfSr1d7NpTBKHD6yg0AwF95RYoOIfkouBRGkwC9ovsRERHZS7UMUEhICLRabaVsz+XLlytlhSqKiooCALRr1w6XLl1CYmIiRowYgdOnT+Ps2bMYPHiwvK/RWJoJ8fT0xO+//45WrVpVOp5Op4NOp6vpJdXYtl8y8Pmxi6X//2smtv2aifAgPRIGx2BgbLjdx5i/JVUeWvr6l0zctXiHQ8eoilKNGgGgW1QjhAfpkZldYLEOSAMgLEiPblGNavxeREREplTLAHl7e6NLly5ITk42256cnIwePXrYfRwhBAoLCwEA0dHR+Pnnn5GSkiI/HnzwQdx7771ISUlBRESEotegJGk2VMXp747MhpKOUbGuRskZVUoOgWk9NEgYHGPxOSkHmDA4BloPdoYmIiJlqdp2d/bs2RgzZgy6du2KuLg4rF69Gunp6Zg8eTKA0qGpP//8Exs2bAAArFixAi1atEB0dDSA0r5AS5cuxVNPPQUA0Ov1iI2NNXuPBg0aAECl7e7E1mwoDUpnQ/WPCbMaDChxDHtUXLG+psHJwNhwrBzVGVPeP2q2PczBzBcREZEjVA2Ahg8fjqysLCxYsAAZGRmIjY3F1q1bERkZCQDIyMgw6wlkNBoxd+5cpKWlwdPTE61atcKiRYswadIktS5BEY7MhoprFey0Y9hDmgUGlK5Yr8TK7XfeUn4+r/9fezRt4ItuUY2Y+SEiIqdRfeGlqVOnYurUqRafW79+vdnXTz31lJztsVfFY7gjJWZDuWpGld6rdMV6IUqHwZQIgC5m5wMAQvy9MayL+w5TEhFR3aH6LDBSZjaUq2ZUaTQa+HopuyJ8ZlnmKiyIs72IiMg1GAC5AWk2lLUBHw2AcBuzoZQ4hr18FV4O46IUAAX6KHI8IiIiWxgAuQHT2VAVAxh7Z0O5ckaVkjPBACCzbAisaQNmgIiIyDUYALmJgbHhWDW6c6VhoLAgPVaN7mzXbCjpGCH+3tU+hj18vJRrhggAGdc5BEZERK6lehE0lRsYG47+MWGIX74Lp6/kYXb/2zHt3lsdytoMjA2HBhpMeu8IIhr5YMmwDorPqCpfEV6ZDJA0e61pEIfAiIjINZgBcjNaDw1uaxIAAAjUe1YrcJFmerUJC0Rcq2DFp5P7KrgcBgBk5jADRERErsUAyA2Fl9XCZORUb8q6VFTctIFzMipKBkBCCFy8XlYDxAwQERG5CAMgNxRelgnJrKKxYVWcPa3c11u5IbDrN4tRWFK6XltokPrrsRERUf3AAMgNhZdlQqTiYEdJGZVwpwVAymWATJsg6jy1NT4eERGRPRgAuSEpcMnIya/W66WamnAnDSkpGQCxCSIREamBAZAbCi+r3cnMLoDRaGl5U+uEEPKsKudlgJQbAruY7dxgjYiIyBIGQG6oSYAOGg1QbBDIyity6LXX8opQVGKERgOEBjp5CEyBpTCkJojOCtaIiIgsYQDkhry0HmgSUFoQnJHt2DCYlP0J8dfB29M5314lh8CkOidmgIiIyJUYALmpMKkQ2sGZYM4e/gLKh8DyFBgCc8X5EhERVcQAyE2Flw1fZVx3LAPkiiElKQOUr0QGqOx8WQRNRESuxADITVW3GaIrioqVWg3etGCbTRCJiMiVGAC5KXkqvIO9gFwxrVyp1eD/YhNEIiJSCQMgNyVlcBztBu3sJoiAckXQGWyCSEREKmEA5KakAOaig7PAnN0EETDtA1SzAIhNEImISC0MgNyU1AzxUo79zRBd0QQRAPxMhsCEcKxRoyk2QSQiIrUwAHJTps0Qr+YV2vUaVzRBBACfsgDIKCDX8FQHmyASEZFaGAC5KdNmiPbWAbmiCSJQPgQG1GwYjE0QiYhILQyA3JjUDPGinTPBXNVUUOuhga4swMorrP5MMDZBJCIitTAAcmNNywKDTDsLoV05pCQ3QyyuQQaIQ2BERKQSBkBuTJodZW8zRFcWFcvLYVQzA2ResM0hMCIici0GQG7M0WaImS4cUqrpchhsgkhERGpiAOTGHG2GKDVBdEVfnZouh8EmiEREpCYGQG7M0WaIrmiCKPH1Kg1aqrsiPGeAERGRmhgAuTFHmiG6qgmixE9XsyEwqa6JXaCJiEgNDIDcmCPNEF3VBFHiIxVBVzcAcsGaZURERNYwAHJjjjRDdFUTRImfXARdvSGwTM4AIyIiFTEAcnP2NkN0dVNBaTmMameA2ASRiIhUxADIzdnbDNHVTQVrOg2eTRCJiEhNDIDcnNwM0c4hMFcNKdWkESKbIBIRkdoYALm5pmUBgs0AyMVFxVIG6GY1lsJgE0QiIlIbAyA3V54BsjUE5tpp5X5lGaDqDIGxCSIREamNAZCbC7dzCExqgti0gWuGlOQi6GoMgbEJIhERqY0BkJuzpxmiaU1NmAt6AAEmjRCrMQTGJohERKQ2BkBuzp5miK5ugggAPl7VL4KW6pWaMgAiIiKVMAByc/Y0Q3R1E0SgZkthZMr1ShwCIyIidTAAqgVsNUNUo6mgbw0aIUqLuzZtwAwQERGpQ/UAaOXKlYiKioJer0eXLl2wZ88eq/vu3bsXPXv2RHBwMHx8fBAdHY3ly5eb7bNmzRr06tULDRs2RMOGDdGvXz8cPHjQ2ZfhVLaaIarRVNC3BrPAMl1cr0RERFSRqgHQxo0bMXPmTDz//PM4duwYevXqhfvuuw/p6ekW9/fz88P06dOxe/dunDhxAvPmzcO8efOwevVqeZ+dO3dixIgR+P7777F//360aNEC8fHx+PPPP111WYqz1QxRjaaCUgaoyGBEscFo9+tMC7ZdNWONiIioIlUDoGXLlmHChAmYOHEi2rRpg6SkJERERGDVqlUW9+/UqRNGjBiBtm3bomXLlhg9ejQGDBhgljV6//33MXXqVHTs2BHR0dFYs2YNjEYjvvvuO1ddluJsNUNUY2V1aRo8ANx0IAtk2gSxSSCbIBIRkTpUC4CKiopw5MgRxMfHm22Pj4/Hvn377DrGsWPHsG/fPvTu3dvqPjdv3kRxcTEaNWpkdZ/CwkLk5OSYPdyJrWaIrm6CCADeWg94emgAODYMxiaIRETkDlQLgK5evQqDwYDQ0FCz7aGhocjMzKzytc2bN4dOp0PXrl0xbdo0TJw40eq+c+bMQbNmzdCvXz+r+yxcuBBBQUHyIyIiwrGLcTKpWNjWEJgrh5Q0Go3JivD2T4VnE0QiInIHqhdBazQas6+FEJW2VbRnzx4cPnwYb731FpKSkvDhhx9a3G/JkiX48MMPsXnzZuj11rMjc+fORXZ2tvw4f/684xfiRNIsMEvNEIUQqhUVV2c5DDZBJCIid+Cp1huHhIRAq9VWyvZcvny5UlaooqioKABAu3btcOnSJSQmJmLEiBFm+yxduhSvvvoqtm/fjvbt21d5PJ1OB53OfetRKjZDbBJQHjxcyytCkcG1TRAlvtVYDoNNEImIyB2olgHy9vZGly5dkJycbLY9OTkZPXr0sPs4QggUFpp3SH7ttdfw0ksvYdu2bejatasi56sm02aIGRV6AanRBFHiq3N8RXg2QSQiInegWgYIAGbPno0xY8aga9euiIuLw+rVq5Geno7JkycDKB2a+vPPP7FhwwYAwIoVK9CiRQtER0cDKO0LtHTpUjz11FPyMZcsWYIXXngBH3zwAVq2bClnmPz9/eHv7+/iK1ROWJAPLuUUIiO7AB1MSpTUaIIo8S1bDuNmof0BEJsgEhGRO1A1ABo+fDiysrKwYMECZGRkIDY2Flu3bkVkZCQAICMjw6wnkNFoxNy5c5GWlgZPT0+0atUKixYtwqRJk+R9Vq5ciaKiIjzyyCNm75WQkIDExESXXJczNA3S4/j5yjPB1GiCKJEzQA4UQbMJIhERuQNVAyAAmDp1KqZOnWrxufXr15t9/dRTT5lleyw5e/asQmfmXsLkbtCWh8DUmFUl1QDZ2weITRCJiMhdqD4LjOwjNUO8WDEAUqEJokRaEd7eAIhNEImIyF0wAKolwqysB6ZGE0SJn4NDYBevS00QdWyCSEREqmIAVEtYa4ao5pCSj4NDYJkqFmwTERGZYgBUS1hqhqhmE0SgvBGivQGQmgXbREREphgA1RJNAnTwMGmGCABZKjZBBEyLoO0bAlNzyj4REZEpBkC1hJfWA40rNEPMVLEJIgD4OpgBYhNEIiJyFwyAahEpcJAyKXL9j0oZFUczQGyCSERE7oIBUC0iBTpSLY30X7UWFnW0DxCbIBIRkbtgAFSLVGyGqGYTRMBkCMyOpTDYBJGIiNwJA6BapGIzRDWbIAKmi6HaHgJjE0QiInInDIBqkYrNENVsggiYDIHZkQFiE0QiInInDIBqEal4+OL1CkXQKg0p+TqwFAabIBIRkTthAFSLmDZDNBjVbYIIlA+B5Rcb5OaM1rAJIhERuRMGQLWI1AyxxChw8lKuqk0QgfIhMKA0CKoKmyASEZE7YQBUi5g2Qzya/hcA9ZogAoDeUwuNpvT/bQ2DyQEQZ4AREZEbYABUy0hT3o+euw5AvSaIAODhoYGPl33NEDkERkRE7oQBUC0jBRDHyjJAas0Ak9izHIbBKJB2NQ8AcC2vCAYb9UJERETOxgColpEyQGfKAgq1miBKbC2Hse2XDPRcvAOXckoXcJ2/JRV3Ld6Bbb9kuOwciYiIKmIAVMtUHEJSe0ipquUwtv2SgSnvHZVnq0kyswsw5b2jDIKIiEg1DIBqmYpDXuoPgZUGQHkVmiEajALzt6TC0mCXtG3+llQOhxERkSoYANUyFVdSV3tdLakGKL/CchgH067JM78sESidGXYw7ZozT4+IiMgiBkC1TFiFmh+1V1a3NgR2Odd68FOd/YiIiJTEAKiWaRKgg8bk67NX81QdRrK2HliTAPsCM3v3IyIiUhIDoFrmuxOX5OaDADBm7UFVZ1X56ixPg+8W1Qh+3tYXPdWgtIC7W1QjZ54eERGRRQyAahFpVlXFhI+as6p8rTRC/OGPq8iz0htIit8SBsdA66GxuA8REZEzMQCqJdx1VpWlDNCV3ELM/t9xAECv20IqTdUPC9Jj1ejOGBgb7roTJSIiMuGp9gmQfRyZVRXXKthl5yVPgy/LABmNArP/l4KrNwrROjQAa8Z2hZfWAwfTruFybgGaBJQOezHzQ0REamIAVEu466wqqc4nvywDtGbPGew5dRV6Lw+8ObIT9GVDZK4MyoiIiGzhEFgt4a6zqnRlAU7a1Tz898dzWLLtNwDAiw+0xe2hAS49FyIiInsxAKolukU1QniQHtYGjtSYVbXtlwy8uvUEAOC3zFy88NkvMAigc4sGGNEtwmXnQURE5CgGQLWE1kODhMExAFApCFJjVpU0I+36zeJKzx1Lv45vfs10yXkQERFVBwOgWmRgbDhWje5scT0wV86qqmpGmoTrfBERkTtjEXQtMzA2HP1jwlSdVeWuM9KIiIjsxQCoFtJ6aFQNLNx1RhoREZG9OARGDnPXGWlERET2YgBEDnPHGWlERESOYABEDnO3GWlERESOYgBE1eIuM9KIiIiqg0XQVG3uMCONiIioOhgAUY2oPSONiIioOjgERkRERPWO6gHQypUrERUVBb1ejy5dumDPnj1W9927dy969uyJ4OBg+Pj4IDo6GsuXL6+036ZNmxATEwOdToeYmBh8+umnzrwEIiIiqmVUDYA2btyImTNn4vnnn8exY8fQq1cv3HfffUhPT7e4v5+fH6ZPn47du3fjxIkTmDdvHubNm4fVq1fL++zfvx/Dhw/HmDFjcPz4cYwZMwaPPvooDhw44KrLIiIiIjenEUKotmBT9+7d0blzZ6xatUre1qZNGwwdOhQLFy606xgPP/ww/Pz88N///hcAMHz4cOTk5ODrr7+W9xk4cCAaNmyIDz/80K5j5uTkICgoCNnZ2QgMDHTgioiIiEgtjnx+q5YBKioqwpEjRxAfH2+2PT4+Hvv27bPrGMeOHcO+ffvQu3dvedv+/fsrHXPAgAF2H5OIiIjqPtVmgV29ehUGgwGhoaFm20NDQ5GZmVnla5s3b44rV66gpKQEiYmJmDhxovxcZmamw8csLCxEYWGh/HVOTo4jl0JERES1jOpF0BqNec8YIUSlbRXt2bMHhw8fxltvvYWkpKRKQ1uOHnPhwoUICgqSHxEREQ5eBREREdUmqmWAQkJCoNVqK2VmLl++XCmDU1FUVBQAoF27drh06RISExMxYsQIAEBYWJjDx5w7dy5mz54tf52Tk8MgiIiIqA5TLQPk7e2NLl26IDk52Wx7cnIyevToYfdxhBBmw1dxcXGVjvntt99WeUydTofAwECzBxEREdVdqnaCnj17NsaMGYOuXbsiLi4Oq1evRnp6OiZPngygNDPz559/YsOGDQCAFStWoEWLFoiOjgZQ2hdo6dKleOqpp+RjzpgxA3fffTcWL16MIUOG4PPPP8f27duxd+9eu89LmhjHWiAiIqLaQ/rctmuCu1DZihUrRGRkpPD29hadO3cWu3btkp8bN26c6N27t/z1v/71L9G2bVvh6+srAgMDRadOncTKlSuFwWAwO+bHH38sWrduLby8vER0dLTYtGmTQ+d0/vx5AYAPPvjggw8++KiFj/Pnz9v8rFe1D5C7MhqNuHjxIgICAmwWZJuSaofOnz/PYTQn4P11Pt5j5+L9dT7eY+dy9/srhEBubi6aNm0KD4+qq3y4GKoFHh4eaN68ebVfzzoi5+L9dT7eY+fi/XU+3mPncuf7GxQUZNd+qk+DJyIiInI1BkBERERU7zAAUpBOp0NCQgJ0Op3ap1In8f46H++xc/H+Oh/vsXPVpfvLImgiIiKqd5gBIiIionqHARARERHVOwyAiIiIqN5hAERERET1DgMghaxcuRJRUVHQ6/Xo0qUL9uzZo/Yp1Vq7d+/G4MGD0bRpU2g0Gnz22WdmzwshkJiYiKZNm8LHxwf33HMPfv31V3VOthZauHAh7rjjDgQEBKBJkyYYOnQofv/9d7N9eI+rb9WqVWjfvr3cKC4uLg5ff/21/DzvrbIWLlwIjUaDmTNnytt4j2smMTERGo3G7BEWFiY/X1fuLwMgBWzcuBEzZ87E888/j2PHjqFXr1647777kJ6ervap1Up5eXno0KED/v3vf1t8fsmSJVi2bBn+/e9/49ChQwgLC0P//v2Rm5vr4jOtnXbt2oVp06bhxx9/RHJyMkpKShAfH4+8vDx5H97j6mvevDkWLVqEw4cP4/Dhw+jTpw+GDBkif0Dw3irn0KFDWL16Ndq3b2+2nfe45tq2bYuMjAz58fPPP8vP1Zn769AqoWRRt27dxOTJk822RUdHizlz5qh0RnUHAPHpp5/KXxuNRhEWFiYWLVokbysoKBBBQUHirbfeUuEMa7/Lly8LAPJCxLzHymvYsKF45513eG8VlJubK2677TaRnJwsevfuLWbMmCGE4M+vEhISEkSHDh0sPleX7i8zQDVUVFSEI0eOID4+3mx7fHw89u3bp9JZ1V1paWnIzMw0u986nQ69e/fm/a6m7OxsAECjRo0A8B4ryWAw4KOPPkJeXh7i4uJ4bxU0bdo0DBo0CP369TPbznusjFOnTqFp06aIiorCY489hjNnzgCoW/eXi6HW0NWrV2EwGBAaGmq2PTQ0FJmZmSqdVd0l3VNL9/vcuXNqnFKtJoTA7NmzcddddyE2NhYA77ESfv75Z8TFxaGgoAD+/v749NNPERMTI39A8N7WzEcffYSjR4/i0KFDlZ7jz2/Nde/eHRs2bMDtt9+OS5cu4eWXX0aPHj3w66+/1qn7ywBIIRqNxuxrIUSlbaQc3m9lTJ8+HT/99BP27t1b6Tne4+pr3bo1UlJScP36dWzatAnjxo3Drl275Od5b6vv/PnzmDFjBr799lvo9Xqr+/EeV999990n/3+7du0QFxeHVq1a4d1338Wdd94JoG7cXw6B1VBISAi0Wm2lbM/ly5crRchUc9JMBN7vmnvqqafwxRdf4Pvvv0fz5s3l7bzHNeft7Y1bb70VXbt2xcKFC9GhQwe88cYbvLcKOHLkCC5fvowuXbrA09MTnp6e2LVrF/71r3/B09NTvo+8x8rx8/NDu3btcOrUqTr1M8wAqIa8vb3RpUsXJCcnm21PTk5Gjx49VDqruisqKgphYWFm97uoqAi7du3i/baTEALTp0/H5s2bsWPHDkRFRZk9z3usPCEECgsLeW8V0LdvX/z8889ISUmRH127dsWoUaOQkpKCW265hfdYYYWFhThx4gTCw8Pr1s+wauXXdchHH30kvLy8xH/+8x+RmpoqZs6cKfz8/MTZs2fVPrVaKTc3Vxw7dkwcO3ZMABDLli0Tx44dE+fOnRNCCLFo0SIRFBQkNm/eLH7++WcxYsQIER4eLnJyclQ+89phypQpIigoSOzcuVNkZGTIj5s3b8r78B5X39y5c8Xu3btFWlqa+Omnn8Rzzz0nPDw8xLfffiuE4L11BtNZYELwHtfU008/LXbu3CnOnDkjfvzxR/HAAw+IgIAA+TOtrtxfBkAKWbFihYiMjBTe3t6ic+fO8pRictz3338vAFR6jBs3TghROg0zISFBhIWFCZ1OJ+6++27x888/q3vStYilewtArFu3Tt6H97j6Hn/8cflvQePGjUXfvn3l4EcI3ltnqBgA8R7XzPDhw0V4eLjw8vISTZs2FQ8//LD49ddf5efryv3VCCGEOrknIiIiInWwBoiIiIjqHQZAREREVO8wACIiIqJ6hwEQERER1TsMgIiIiKjeYQBERERE9Q4DICIiIqp3GAAR1QNnz56FRqNBSkqK2qci++2333DnnXdCr9ejY8eOTnufxMREpx6/Jtz53IjqOgZARC4wfvx4aDQaLFq0yGz7Z599VutWUFZKQkIC/Pz88Pvvv+O7776zuM/ly5cxadIktGjRAjqdDmFhYRgwYAD279/v4rMt58qgRQpcKz5Gjx6t2Hu0bNkSSUlJih2PqLbwVPsEiOoLvV6PxYsXY9KkSWjYsKHap6OIoqIieHt7V+u1p0+fxqBBgxAZGWl1n2HDhqG4uBjvvvsubrnlFly6dAnfffcdrl27Vt1TrpW2b9+Otm3byl/7+PioeDaW1eRngUgNzAARuUi/fv0QFhaGhQsXWt3HUnYhKSkJLVu2lL8eP348hg4dildffRWhoaFo0KAB5s+fj5KSEjzzzDNo1KgRmjdvjrVr11Y6/m+//YYePXpAr9ejbdu22Llzp9nzqampuP/+++Hv74/Q0FCMGTMGV69elZ+/5557MH36dMyePRshISHo37+/xeswGo1YsGABmjdvDp1Oh44dO2Lbtm3y8xqNBkeOHMGCBQug0WiQmJhY6RjXr1/H3r17sXjxYtx7772IjIxEt27dMHfuXAwaNEjeLzs7G08++SSaNGmCwMBA9OnTB8ePH7d6jwFg3bp1aNOmDfR6PaKjo7Fy5Uqz5y9cuIDHHnsMjRo1gp+fH7p27YoDBw5g/fr1mD9/Po4fPy5nY9avX2/3eSxatAihoaEICAjAhAkTUFBQUOV5SoKDgxEWFiY/goKC7HrP06dPY8iQIQgNDYW/vz/uuOMObN++XX7+nnvuwblz5zBr1iz5egDHfg4XLlyIpk2b4vbbbwcA/Pnnnxg+fDgaNmyI4OBgDBkyBGfPnpVft3PnTnTr1g1+fn5o0KABevbsiXPnztl1H4iUxACIyEW0Wi1effVVvPnmm7hw4UKNjrVjxw5cvHgRu3fvxrJly5CYmIgHHngADRs2xIEDBzB58mRMnjwZ58+fN3vdM888g6effhrHjh1Djx498OCDDyIrKwsAkJGRgd69e6Njx444fPgwtm3bhkuXLuHRRx81O8a7774LT09P/PDDD3j77bctnt8bb7yB119/HUuXLsVPP/2EAQMG4MEHH8SpU6fk92rbti2efvppZGRk4B//+EelY/j7+8Pf3x+fffYZCgsLLb6PEAKDBg1CZmYmtm7diiNHjqBz587o27ev1SzRmjVr8Pzzz+OVV17BiRMn8Oqrr+KFF17Au+++CwC4ceMGevfujYsXL+KLL77A8ePH8c9//hNGoxHDhw/H008/jbZt2yIjIwMZGRkYPny4Xefxv//9DwkJCXjllVdw+PBhhIeHVwq8HGHPe964cQP3338/tm/fjmPHjmHAgAEYPHgw0tPTAQCbN29G8+bNsWDBAvl6HPHdd9/hxIkTSE5OxpdffombN2/i3nvvhb+/P3bv3o29e/fC398fAwcORFFREUpKSjB06FD07t0bP/30E/bv348nn3yy3g4Dk8pUXYqVqJ4YN26cGDJkiBBCiDvvvFM8/vjjQgghPv30U2H6a5iQkCA6dOhg9trly5eLyMhIs2NFRkYKg8Egb2vdurXo1auX/HVJSYnw8/MTH374oRBCiLS0NAFALFq0SN6nuLhYNG/eXCxevFgIIcQLL7wg4uPjzd77/PnzAoD4/fffhRClq2537NjR5vU2bdpUvPLKK2bb7rjjDjF16lT56w4dOoiEhIQqj/PJJ5+Ihg0bCr1eL3r06CHmzp0rjh8/Lj//3XfficDAQFFQUGD2ulatWom3335bCFH5nkZERIgPPvjAbP+XXnpJxMXFCSGEePvtt0VAQIDIysqyeE6Wvkf2nEdcXJyYPHmy2fPdu3evdCxT0vfNx8dH+Pn5yY+jR4/a9Z6WxMTEiDfffFP+OjIyUixfvtzmNVr6OQwNDRWFhYXytv/85z+idevWwmg0ytsKCwuFj4+P+Oabb0RWVpYAIHbu3Gn1/IhchRkgIhdbvHgx3n33XaSmplb7GG3btoWHR/mvb2hoKNq1ayd/rdVqERwcjMuXL5u9Li4uTv5/T09PdO3aFSdOnAAAHDlyBN9//72cefH390d0dDSA0qEUSdeuXas8t5ycHFy8eBE9e/Y0296zZ0/5vew1bNgwORMzYMAA7Ny5E507d5aHnY4cOYIbN24gODjY7LzT0tLMzlly5coVnD9/HhMmTDDb/+WXX5b3T0lJQadOndCoUSO7z9Oe8zhx4oTZ/QdQ6WtrNm7ciJSUFPkRExNj13vm5eXhn//8J2JiYtCgQQP4+/vjt99+kzNANdWuXTuzup8jR47gjz/+QEBAgHw+jRo1QkFBAU6fPo1GjRph/PjxcibqjTfecDjrRKQUFkETudjdd9+NAQMG4LnnnsP48ePNnvPw8IAQwmxbcXFxpWN4eXmZfa3RaCxuMxqNNs9HGn4wGo0YPHgwFi9eXGmf8PBw+f/9/PxsHtP0uBIhRLWGOvR6Pfr374/+/fvjxRdfxMSJE5GQkIDx48fDaDQiPDy8Ui0TADRo0KDSNul+rFmzBt27dzd7TqvVAqhegbGj5+GoiIgI3HrrrQ6/5zPPPINvvvkGS5cuxa233gofHx888sgjKCoqqvL97P05rPizYDQa0aVLF7z//vuV9m3cuDGA0vqrv//979i2bRs2btyIefPmITk5GXfeeWeV50SkNAZARCpYtGgROnbsKBeOSho3bozMzEyzYEHJ3j0//vgj7r77bgBASUkJjhw5gunTpwMAOnfujE2bNqFly5bw9Kz+n4bAwEA0bdoUe/fuld8LAPbt24du3brV7AIAxMTE4LPPPgNQes6ZmZnw9PQ0K9C1JjQ0FM2aNcOZM2cwatQoi/u0b98e77zzDq5du2YxC+Tt7Q2DwWC2zZ7zaNOmDX788UeMHTtW3vbjjz/aPGdr7HnPPXv2YPz48XjooYcAlNYEmRYkW7ue6v4cdu7cGRs3bpSLsq3p1KkTOnXqhLlz5yIuLg4ffPABAyByOQ6BEamgXbt2GDVqFN58802z7ffccw+uXLmCJUuW4PTp01ixYgW+/vprxd53xYoV+PTTT/Hbb79h2rRp+Ouvv/D4448DAKZNm4Zr165hxIgROHjwIM6cOYNvv/0Wjz/+eKUPSFueeeYZLF68GBs3bsTvv/+OOXPmICUlBTNmzLD7GFlZWejTpw/ee+89/PTTT0hLS8PHH3+MJUuWYMiQIQBKZ9bFxcVh6NCh+Oabb3D27Fns27cP8+bNw+HDhy0eNzExEQsXLsQbb7yBkydP4ueff8a6deuwbNkyAMCIESMQFhaGoUOH4ocffsCZM2ewadMmufdQy5YtkZaWhpSUFFy9ehWFhYV2nceMGTOwdu1arF27FidPnkRCQgJ+/fVXh+6rKXve89Zbb8XmzZuRkpKC48ePY+TIkZWygi1btsTu3bvx559/yjP+qvtzOGrUKISEhGDIkCHYs2cP0tLSsGvXLsyYMQMXLlxAWloa5s6di/379+PcuXP49ttvcfLkSbRp06ba94Go2lStQCKqJ0yLoCVnz54VOp1OVPw1XLVqlYiIiBB+fn5i7Nix4pVXXqlUfFrxWL179xYzZsww22Za3CoV037wwQeie/fuwtvbW7Rp00Z89913Zq85efKkeOihh0SDBg2Ej4+PiI6OFjNnzpSLWi29jyUGg0HMnz9fNGvWTHh5eYkOHTqIr7/+2mwfW0XQBQUFYs6cOaJz584iKChI+Pr6itatW4t58+aJmzdvyvvl5OSIp556SjRt2lR4eXmJiIgIMWrUKJGeni6EsFzQ+/7774uOHTsKb29v0bBhQ3H33XeLzZs3y8+fPXtWDBs2TAQGBgpfX1/RtWtXceDAAfm8hg0bJho0aCAAiHXr1tl1HkII8corr4iQkBDh7+8vxo0bJ/75z3/aVQR97Ngxi8/bes+0tDRx7733Ch8fHxERESH+/e9/V/oe7t+/X7Rv377Sz2J1fg6FECIjI0OMHTtWhISECJ1OJ2655RbxxBNPiOzsbJGZmSmGDh0qwsPDhbe3t4iMjBQvvviiWUE/katohKgw0EtERERUx3EIjIiIiOodBkBERERU7zAAIiIionqHARARERHVOwyAiIiIqN5hAERERET1DgMgIiIiqncYABEREVG9wwCIiIiI6h0GQERERFTvMAAiIiKieocBEBEREdU7/w/qdLdk8rVk7QAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Final Model Evaluation (After Forward Selection):\n",
      "Accuracy: 0.8711\n",
      "Precision: 0.4292\n",
      "Recall: 0.4375\n",
      "F1-score: 0.4333\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.93      0.93      0.93      7310\n",
      "           1       0.43      0.44      0.43       928\n",
      "\n",
      "    accuracy                           0.87      8238\n",
      "   macro avg       0.68      0.68      0.68      8238\n",
      "weighted avg       0.87      0.87      0.87      8238\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "from sklearn.feature_selection import SelectKBest, f_classif\n",
    "from sklearn.metrics import f1_score, accuracy_score, precision_score, recall_score, classification_report, confusion_matrix\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "\n",
    "def forward_selection_f_score_for_sel(X_train_f_score_for_sel, y_train_f_score_for_sel, \n",
    "                                      X_test_f_score_for_sel, y_test_f_score_for_sel, \n",
    "                                      model_f_score_for_sel):\n",
    "    \"\"\"\n",
    "    Performs forward selection to choose the best subset of features based on F1-score.\n",
    "    \n",
    "    Parameters:\n",
    "    - X_train_f_score_for_sel: Training feature set (DataFrame)\n",
    "    - y_train_f_score_for_sel: Training labels (Series or array)\n",
    "    - X_test_f_score_for_sel: Testing feature set (DataFrame)\n",
    "    - y_test_f_score_for_sel: Testing labels (Series or array)\n",
    "    - model_f_score_for_sel: The classification model (e.g., Naïve Bayes)\n",
    "\n",
    "    Returns:\n",
    "    - selected_features_f_score_for_sel: List of selected feature names\n",
    "    - feature_scores_f_score_for_sel: List containing (num_features, F1-score, selected_feature_names)\n",
    "    - f1_list_f_score_for_sel: List of F1-scores for each iteration\n",
    "    \"\"\"\n",
    "    \n",
    "    selected_features_f_score_for_sel = []\n",
    "    best_f1_f_score_for_sel = 0  # Stores the best F1-score found\n",
    "    feature_scores_f_score_for_sel = []  # Stores (num_features, F1-score, selected feature names)\n",
    "    f1_list_f_score_for_sel = []  # Stores F1-score progression over iterations\n",
    "\n",
    "    for i_f_score_for_sel in range(1, X_train_f_score_for_sel.shape[1] + 1):\n",
    "        # Select the top `i_f_score_for_sel` best features using ANOVA F-score\n",
    "        best_feature_subset_f_score_for_sel = SelectKBest(score_func=f_classif, k=i_f_score_for_sel)\n",
    "        best_feature_subset_f_score_for_sel.fit(X_train_f_score_for_sel, y_train_f_score_for_sel)\n",
    "        \n",
    "        # Get indices of selected features\n",
    "        top_features_f_score_for_sel = best_feature_subset_f_score_for_sel.get_support(indices=True)\n",
    "        selected_feature_names_f_score_for_sel = X_train_f_score_for_sel.columns[top_features_f_score_for_sel]\n",
    "        \n",
    "        # Filter the dataset to keep only selected features\n",
    "        X_train_f_score_for_sel_selected = X_train_f_score_for_sel[selected_feature_names_f_score_for_sel]\n",
    "        X_test_f_score_for_sel_selected = X_test_f_score_for_sel[selected_feature_names_f_score_for_sel]\n",
    "\n",
    "        # Train the model with the selected features\n",
    "        model_f_score_for_sel.fit(X_train_f_score_for_sel_selected, y_train_f_score_for_sel)\n",
    "        y_pred_f_score_for_sel = model_f_score_for_sel.predict(X_test_f_score_for_sel_selected)\n",
    "\n",
    "        # Compute the F1-score\n",
    "        f1_f_score_for_sel = f1_score(y_test_f_score_for_sel, y_pred_f_score_for_sel)\n",
    "        f1_list_f_score_for_sel.append(f1_f_score_for_sel)\n",
    "\n",
    "        # Store the results\n",
    "        feature_scores_f_score_for_sel.append((i_f_score_for_sel, f1_f_score_for_sel, selected_feature_names_f_score_for_sel.tolist()))\n",
    "\n",
    "        # Update the best F1-score and corresponding selected features\n",
    "        if f1_f_score_for_sel > best_f1_f_score_for_sel:\n",
    "            best_f1_f_score_for_sel = f1_f_score_for_sel\n",
    "            selected_features_f_score_for_sel = selected_feature_names_f_score_for_sel.tolist()\n",
    "\n",
    "    return selected_features_f_score_for_sel, feature_scores_f_score_for_sel, f1_list_f_score_for_sel\n",
    "\n",
    "\n",
    "# Initialize the Naïve Bayes model\n",
    "nb_model_f_score_for_sel = GaussianNB()\n",
    "\n",
    "# Perform forward selection using F1-score\n",
    "selected_features_f_score_for_sel, feature_scores_f_score_for_sel, f1_list_f_score_for_sel = forward_selection_f_score_for_sel(\n",
    "    X_train, y_train, X_test, y_test, nb_model_f_score_for_sel\n",
    ")\n",
    "\n",
    "# Plot F1-score progression\n",
    "plt.plot(range(1, len(f1_list_f_score_for_sel) + 1), f1_list_f_score_for_sel, marker='o', linestyle='-')\n",
    "plt.xlabel(\"Number of Selected Features\")\n",
    "plt.ylabel(\"F1-Score\")\n",
    "plt.title(\"Forward Selection - F1-Score Progression\")\n",
    "plt.show()\n",
    "\n",
    "# Final model evaluation with selected features\n",
    "X_train_f_score_for_sel_selected = X_train[selected_features_f_score_for_sel]\n",
    "X_test_f_score_for_sel_selected = X_test[selected_features_f_score_for_sel]\n",
    "\n",
    "# Train the final model with the best-selected features\n",
    "nb_model_f_score_for_sel.fit(X_train_f_score_for_sel_selected, y_train)\n",
    "y_pred_f_score_for_sel = nb_model_f_score_for_sel.predict(X_test_f_score_for_sel_selected)\n",
    "\n",
    "# Compute evaluation metrics\n",
    "accuracy_f_score_for_sel = accuracy_score(y_test, y_pred_f_score_for_sel)\n",
    "precision_f_score_for_sel = precision_score(y_test, y_pred_f_score_for_sel)\n",
    "recall_f_score_for_sel = recall_score(y_test, y_pred_f_score_for_sel)\n",
    "f1_f_score_for_sel_final = f1_score(y_test, y_pred_f_score_for_sel)\n",
    "conf_matrix_f_score_for_sel = confusion_matrix(y_test, y_pred_f_score_for_sel)\n",
    "\n",
    "# Print final results\n",
    "print(f\"\\nFinal Model Evaluation (After Forward Selection):\")\n",
    "print(f\"Accuracy: {accuracy_f_score_for_sel:.4f}\")\n",
    "print(f\"Precision: {precision_f_score_for_sel:.4f}\")\n",
    "print(f\"Recall: {recall_f_score_for_sel:.4f}\")\n",
    "print(f\"F1-score: {f1_f_score_for_sel_final:.4f}\\n\")\n",
    "\n",
    "print(\"Classification Report:\")\n",
    "print(classification_report(y_test, y_pred_f_score_for_sel))\n",
    "\n",
    "# Plot confusion matrix\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(conf_matrix_f_score_for_sel, annot=True, fmt=\"d\", cmap=\"Blues\", \n",
    "            xticklabels=[\"Class 0\", \"Class 1\"], yticklabels=[\"Class 0\", \"Class 1\"])\n",
    "plt.xlabel(\"Predicted Label\")\n",
    "plt.ylabel(\"True Label\")\n",
    "plt.title(\"Confusion Matrix (After Forward Selection)\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e0bf109-5382-4caa-99ff-fbe20e9b4584",
   "metadata": {},
   "source": [
    "### Hyperparameter Tuning for Naive Bayes Model using GridSearchCV\n",
    "\n",
    "In this section, we perform hyperparameter tuning for the Naive Bayes model using `GridSearchCV` to improve its performance. Here's how it works:\n",
    "\n",
    "1. **Defining the Naive Bayes Model**:\n",
    "   - We initialize a Naive Bayes model using `GaussianNB()` for classification.\n",
    "\n",
    "2. **Defining the Hyperparameter Grid**:\n",
    "   - A grid of potential hyperparameters is defined for the `var_smoothing` parameter, which controls the smoothing applied to the variance of the features. This helps avoid division by zero in the model's computations. The values in the grid are:\n",
    "     - `[1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1.0]`.\n",
    "\n",
    "3. **Setting Up GridSearchCV**:\n",
    "   - `GridSearchCV` is used to perform an exhaustive search over the hyperparameter grid.\n",
    "   - The cross-validation is set to 5 (`cv=5`), meaning the training data is split into 5 folds for validation.\n",
    "   - `scoring='accuracy'` indicates that the model's performance is evaluated based on accuracy.\n",
    "   - `n_jobs=-1` allows parallel computation, which speeds up the grid search process by using all available CPU cores.\n",
    "\n",
    "4. **Fitting GridSearchCV to the Training Data**:\n",
    "   - The `grid_search.fit(X_train, y_train)` method trains the model on the training data while trying out different combinations of hyperparameters.\n",
    "\n",
    "5. **Getting the Best Hyperparameters**:\n",
    "   - After fitting, we retrieve the best combination of hyperparameters from the grid search using `grid_search.best_params_`. These are the values that yield the best performance.\n",
    "\n",
    "6. **Evaluating the Best Model**:\n",
    "   - The best model (`best_bank_nb`) is retrieved from the grid search using `grid_search.best_estimator_`.\n",
    "   - The model is used to make predictions on the test data (`X_test`).\n",
    "\n",
    "7. **Printing Evaluation Metrics**:\n",
    "   - The accuracy of the model is printed using `accuracy_score` to compare the predicted values (`y_pred`) with the actual values (`y_test`).\n",
    "   - A classification report is printed to display precision, recall, F1-score, and support for each class.\n",
    "\n",
    "This process helps optimize the performance of the Naive Bayes model by finding the best hyperparameters and evaluating its accuracy and classification metrics.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "b3d44d72-2c01-495c-83d6-f79cadc7f955",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Hyperparameters: {'var_smoothing': 0.1}\n",
      "Accuracy: 0.8977\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.91      0.99      0.94      7310\n",
      "           1       0.65      0.20      0.31       928\n",
      "\n",
      "    accuracy                           0.90      8238\n",
      "   macro avg       0.78      0.59      0.63      8238\n",
      "weighted avg       0.88      0.90      0.87      8238\n",
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Define the Naive Bayes model\n",
    "bank_nb = GaussianNB()\n",
    "\n",
    "# Define the hyperparameter grid for tuning\n",
    "param_grid = {\n",
    "    'var_smoothing': [1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1.0]\n",
    "}\n",
    "\n",
    "# Set up the GridSearchCV\n",
    "grid_search = GridSearchCV(estimator=bank_nb, param_grid=param_grid, cv=5, scoring='accuracy',n_jobs=-1)\n",
    "\n",
    "# Fit the grid search to the training data\n",
    "grid_search.fit(X_train, y_train)\n",
    "\n",
    "# Get the best hyperparameters\n",
    "best_params = grid_search.best_params_\n",
    "print(f\"Best Hyperparameters: {best_params}\")\n",
    "\n",
    "# Get the best model\n",
    "best_bank_nb = grid_search.best_estimator_\n",
    "\n",
    "# Evaluate the model\n",
    "y_pred = best_bank_nb.predict(X_test)\n",
    "\n",
    "# Print evaluation metrics\n",
    "print(f\"Accuracy: {accuracy_score(y_test, y_pred):.4f}\")\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2bf15b60-51ab-449f-9ebf-8fc60caabfb1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
