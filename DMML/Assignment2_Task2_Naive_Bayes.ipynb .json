{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f064e28e-2289-4cad-a027-7603761a7eaf",
   "metadata": {},
   "source": [
    "### DMML Assignment 2 - Task 2  \n",
    "\n",
    "### Naive Bayes  \n",
    "\n",
    "**Riya S Huddar (MDS202431)**\n",
    "**Shruti Sharma (MDS202434)**  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "768e04c7-f6cb-4ada-a2c0-6657503b8558",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import necessary libraries\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, classification_report, confusion_matrix\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5aca78a-2e37-402d-8501-3464a007977e",
   "metadata": {},
   "source": [
    "The following is a database of 1698 Hindi Movies from 2005-2017. Source: https://www.kaggle.com/datasets/rishidamarla/bollywood-movies-dataset\n",
    "A movie is a hit if revenue > budget, and it is a flop otherwise. The goal is to predict whether a movie will be a hit or flop, given all the other attributes."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68d30cca-3d1b-4d15-8161-18215743f72c",
   "metadata": {},
   "source": [
    "#### Naive Bayes Classifier"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c325c459-b15c-4886-8124-1cd768574002",
   "metadata": {},
   "source": [
    "#### Dataset Composition\n",
    "\n",
    "The dataset consists of both **numeric** and **categorical** variables. \n",
    "\n",
    "- **Numeric Variables:** These are continuous or discrete numerical features that represent measurable quantities. They may require feature scaling to ensure consistency in model performance.\n",
    "- **Categorical Variables:** These are qualitative features representing different categories or classes. Categorical variables are typically encoded into numerical values before being used in machine learning models.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "10572629-3d5c-4994-a660-108f3a1b8f9f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1698 entries, 0 to 1697\n",
      "Data columns (total 14 columns):\n",
      " #   Column              Non-Null Count  Dtype \n",
      "---  ------              --------------  ----- \n",
      " 0   Movie Name          1698 non-null   object\n",
      " 1   Release Period      1698 non-null   object\n",
      " 2   Whether Remake      1698 non-null   object\n",
      " 3   Whether Franchise   1698 non-null   object\n",
      " 4   Genre               1698 non-null   object\n",
      " 5   New Actor           1698 non-null   object\n",
      " 6   New Director        1698 non-null   object\n",
      " 7   New Music Director  1698 non-null   object\n",
      " 8   Lead Star           1698 non-null   object\n",
      " 9   Director            1698 non-null   object\n",
      " 10  Music Director      1698 non-null   object\n",
      " 11  Number of Screens   1698 non-null   int64 \n",
      " 12  Revenue(INR)        1698 non-null   int64 \n",
      " 13  Budget(INR)         1698 non-null   int64 \n",
      "dtypes: int64(3), object(11)\n",
      "memory usage: 185.8+ KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# Import necessary library\n",
    "import pandas as pd\n",
    "\n",
    "# Define the file path\n",
    "file_path = r\"D:\\CMI\\DMML\\Assignment_2\\archive (2)\\Data for repository.csv\"\n",
    "\n",
    "# Load the dataset into a Pandas DataFrame\n",
    "movie_df = pd.read_csv(file_path, sep=',')  # The dataset uses ',' as a separator\n",
    "\n",
    "# Display basic information about the dataset\n",
    "print(movie_df.info())  # Check column names, data types, and missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "69055df0-c349-44b7-88c8-7537e881a2f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Movie Name</th>\n",
       "      <th>Release Period</th>\n",
       "      <th>Whether Remake</th>\n",
       "      <th>Whether Franchise</th>\n",
       "      <th>Genre</th>\n",
       "      <th>New Actor</th>\n",
       "      <th>New Director</th>\n",
       "      <th>New Music Director</th>\n",
       "      <th>Lead Star</th>\n",
       "      <th>Director</th>\n",
       "      <th>Music Director</th>\n",
       "      <th>Number of Screens</th>\n",
       "      <th>Revenue(INR)</th>\n",
       "      <th>Budget(INR)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Golden Boys</td>\n",
       "      <td>Normal</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>suspense</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Jeet Goswami</td>\n",
       "      <td>Ravi Varma</td>\n",
       "      <td>Baba Jagirdar</td>\n",
       "      <td>5</td>\n",
       "      <td>5000000</td>\n",
       "      <td>85000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Kaccha Limboo</td>\n",
       "      <td>Holiday</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>drama</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Karan Bhanushali</td>\n",
       "      <td>Sagar Ballary</td>\n",
       "      <td>Amardeep Nijjer</td>\n",
       "      <td>75</td>\n",
       "      <td>15000000</td>\n",
       "      <td>825000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Not A Love Story</td>\n",
       "      <td>Holiday</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>thriller</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Mahie Gill</td>\n",
       "      <td>Ram Gopal Verma</td>\n",
       "      <td>Sandeep Chowta</td>\n",
       "      <td>525</td>\n",
       "      <td>75000000</td>\n",
       "      <td>56700000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Qaidi Band</td>\n",
       "      <td>Holiday</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>drama</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Aadar Jain</td>\n",
       "      <td>Habib Faisal</td>\n",
       "      <td>Amit Trivedi</td>\n",
       "      <td>800</td>\n",
       "      <td>210000000</td>\n",
       "      <td>4500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Chaatwali</td>\n",
       "      <td>Holiday</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>adult</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Aadil Khan</td>\n",
       "      <td>Aadil Khan</td>\n",
       "      <td>Babloo Ustad</td>\n",
       "      <td>1</td>\n",
       "      <td>1000000</td>\n",
       "      <td>1075000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Movie Name Release Period Whether Remake Whether Franchise     Genre  \\\n",
       "0       Golden Boys         Normal             No                No  suspense   \n",
       "1     Kaccha Limboo        Holiday             No                No     drama   \n",
       "2  Not A Love Story        Holiday             No                No  thriller   \n",
       "3        Qaidi Band        Holiday             No                No     drama   \n",
       "4         Chaatwali        Holiday             No                No     adult   \n",
       "\n",
       "  New Actor New Director New Music Director         Lead Star  \\\n",
       "0       Yes           No                 No      Jeet Goswami   \n",
       "1       Yes           No                Yes  Karan Bhanushali   \n",
       "2        No           No                 No        Mahie Gill   \n",
       "3       Yes           No                 No        Aadar Jain   \n",
       "4       Yes          Yes                Yes        Aadil Khan   \n",
       "\n",
       "          Director   Music Director  Number of Screens  Revenue(INR)  \\\n",
       "0       Ravi Varma    Baba Jagirdar                  5       5000000   \n",
       "1    Sagar Ballary  Amardeep Nijjer                 75      15000000   \n",
       "2  Ram Gopal Verma   Sandeep Chowta                525      75000000   \n",
       "3     Habib Faisal     Amit Trivedi                800     210000000   \n",
       "4       Aadil Khan     Babloo Ustad                  1       1000000   \n",
       "\n",
       "   Budget(INR)  \n",
       "0        85000  \n",
       "1       825000  \n",
       "2     56700000  \n",
       "3      4500000  \n",
       "4      1075000  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display the first few rows to understand the data\n",
    "movie_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "de2d42dd-3de8-4478-a0ac-80cefc355387",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset Shape: (1698, 14)\n"
     ]
    }
   ],
   "source": [
    "# Print the shape of the dataset (number of rows and columns)\n",
    "# This gives us an overview of the dataset's size.\n",
    "print(f\"Dataset Shape: {movie_df.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "93ce64b1-06dd-44a9-94d6-b450cdef39d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Unique Values for Selected Columns:\n",
      "Movie Name            1695\n",
      "Release Period           2\n",
      "Whether Remake           2\n",
      "Whether Franchise        2\n",
      "Genre                   14\n",
      "New Actor                2\n",
      "New Director             2\n",
      "New Music Director       2\n",
      "Lead Star              764\n",
      "Director              1048\n",
      "Music Director         630\n",
      "Number of Screens      147\n",
      "Revenue(INR)           184\n",
      "Budget(INR)           1104\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Calculate the number of unique values for each of the selected columns\n",
    "# This helps us understand the diversity of values in each column, which is useful for feature engineering.\n",
    "unique_counts = movie_df[['Movie Name', 'Release Period', 'Whether Remake', 'Whether Franchise',\n",
    "       'Genre', 'New Actor', 'New Director', 'New Music Director', 'Lead Star',\n",
    "       'Director', 'Music Director', 'Number of Screens', 'Revenue(INR)',\n",
    "       'Budget(INR)']].nunique()\n",
    "\n",
    "# Print the count of unique values for each selected column\n",
    "# This provides insights into how many different values exist in the chosen columns.\n",
    "print(\"Number of Unique Values for Selected Columns:\")\n",
    "print(unique_counts)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2b22ba0a-cec6-403b-b727-931861d42a97",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Movie Name            0\n",
      "Release Period        0\n",
      "Whether Remake        0\n",
      "Whether Franchise     0\n",
      "Genre                 0\n",
      "New Actor             0\n",
      "New Director          0\n",
      "New Music Director    0\n",
      "Lead Star             0\n",
      "Director              0\n",
      "Music Director        0\n",
      "Number of Screens     0\n",
      "Revenue(INR)          0\n",
      "Budget(INR)           0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Check for missing (null) values in the dataset\n",
    "# The isnull() function returns a DataFrame of boolean values indicating if a value is missing\n",
    "# The sum() function then counts the number of missing values in each column\n",
    "# This is important for data cleaning, as we need to handle missing values before analysis or modeling.\n",
    "print(movie_df.isnull().sum())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ed8eda0-e862-4017-904b-dda061ab2769",
   "metadata": {},
   "source": [
    "### Explanation for Creating the `hit_or_flop` Column:\n",
    "\n",
    "The goal of this step is to create a new column, `hit_or_flop`, which classifies movies as either a \"hit\" or a \"flop\" based on their revenue and budget.\n",
    "\n",
    "1. **Condition for Classification**:\n",
    "   - The classification is determined by comparing the revenue (`Revenue(INR)`) of a movie with its budget (`Budget(INR)`).\n",
    "   - If the revenue is greater than the budget, the movie is labeled as a **hit**. Otherwise, it is labeled as a **flop**.\n",
    "\n",
    "2. **Lambda Function**:\n",
    "   - A **lambda function** is applied row-wise across the DataFrame to check the condition for each movie.\n",
    "   - The lambda function takes each row as input and checks whether the `Revenue(INR)` value is greater than the `Budget(INR)` value.\n",
    "   - If the condition is met, it assigns a value of `'hit'`; otherwise, it assigns `'flop'`.\n",
    "\n",
    "3. **Code Implementation**:\n",
    "\n",
    "```python\n",
    "movie_df['hit_or_flop'] = movie_df.apply(lambda row: 'hit' if row['Revenue(INR)'] > row['Budget(INR)'] else 'flop', axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "75fb4856-d601-41a0-8275-81c56074b9ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Revenue(INR)  Budget(INR) hit_or_flop\n",
      "0       5000000        85000         hit\n",
      "1      15000000       825000         hit\n",
      "2      75000000     56700000         hit\n",
      "3     210000000      4500000         hit\n",
      "4       1000000      1075000        flop\n"
     ]
    }
   ],
   "source": [
    "# Create the 'hit_or_flop' column based on the condition: revenue > budget\n",
    "# The lambda function checks if the 'Revenue(INR)' is greater than 'Budget(INR)'\n",
    "# If true, the movie is labeled as 'hit'; otherwise, it's labeled as 'flop'\n",
    "# axis=1 ensures that the operation is applied row-wise across the DataFrame\n",
    "movie_df['hit_or_flop'] = movie_df.apply(lambda row: 'hit' if row['Revenue(INR)'] > row['Budget(INR)'] else 'flop', axis=1)\n",
    "\n",
    "# Check the first few rows to ensure the new column has been created\n",
    "# The .head() function displays the first 5 rows of the specified columns ('Revenue(INR)', 'Budget(INR)', 'hit_or_flop')\n",
    "# This helps us verify that the 'hit_or_flop' column is correctly generated based on the condition\n",
    "print(movie_df[['Revenue(INR)', 'Budget(INR)', 'hit_or_flop']].head())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46c35770-002a-47fe-b95e-bfb247c9ef54",
   "metadata": {},
   "source": [
    "### Explanation for Data Preprocessing:\n",
    "\n",
    "This section outlines the steps taken to preprocess the dataset, including column removal, encoding categorical variables, and one-hot encoding.\n",
    "\n",
    "1. **Dropping Unnecessary Columns**:\n",
    "   - The columns `'Revenue(INR)'` and `'Movie Name'` are dropped from the dataset. \n",
    "   - The `Revenue(INR)` column is dropped because it is not relevant for the classification task. We are predicting whether a movie is a hit or flop based on other features, and the `Revenue(INR)` itself would provide information about the outcome we are trying to predict. Including it would lead to data leakage and cause the model to overfit, making it unrealistic for real-world scenarios. \n",
    "   - The `Movie Name` column is dropped because it is a unique identifier for each movie and does not contribute to the predictive power of the model. Including it could also introduce unnecessary complexity into the model.\n",
    "   \n",
    "   ```python\n",
    "   movie_df = movie_df.drop(columns=['Revenue(INR)', 'Movie Name'], errors='ignore')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "0a4ee138-6ecb-4fcf-96bc-7a251112702f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop 'Revenue(INR)' and 'Movie Name' columns from the dataset\n",
    "# The 'errors='ignore'' argument ensures that no error is raised if the columns don't exist\n",
    "movie_df = movie_df.drop(columns=['Revenue(INR)', 'Movie Name'], errors='ignore')\n",
    "\n",
    "# Encode the 'hit_or_flop' column using LabelEncoder\n",
    "# The LabelEncoder converts the 'hit_or_flop' labels ('hit' and 'flop') into numeric values (0 and 1)\n",
    "label_encoder = LabelEncoder()\n",
    "movie_df[\"hit_or_flop\"] = label_encoder.fit_transform(movie_df[\"hit_or_flop\"])\n",
    "\n",
    "# Select categorical columns (excluding the 'hit_or_flop' column which is now encoded)\n",
    "# The 'drop' function ensures that 'hit_or_flop' is not considered during encoding\n",
    "categorical_cols = movie_df.select_dtypes(include=['object']).columns\n",
    "categorical_cols = categorical_cols.drop('hit_or_flop', errors='ignore')\n",
    "\n",
    "# Apply one-hot encoding to all categorical columns, dropping the first category to avoid multicollinearity\n",
    "# One-hot encoding converts categorical variables into a format that can be provided to ML algorithms\n",
    "movie_df_encoded = pd.get_dummies(movie_df, columns=categorical_cols, drop_first=True)\n",
    "\n",
    "# Ensure that all values in the transformed dataset are integers\n",
    "# This is important for consistency and model compatibility, as categorical columns are converted to binary (0 or 1)\n",
    "movie_df_encoded = movie_df_encoded.astype(int)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5cddf4e6-dd54-4bcb-8bb5-adfbf0297f8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Number of Screens</th>\n",
       "      <th>Budget(INR)</th>\n",
       "      <th>hit_or_flop</th>\n",
       "      <th>Release Period_Normal</th>\n",
       "      <th>Whether Remake_Yes</th>\n",
       "      <th>Whether Franchise_Yes</th>\n",
       "      <th>Genre_adult</th>\n",
       "      <th>Genre_animation</th>\n",
       "      <th>Genre_comedy</th>\n",
       "      <th>Genre_documentary</th>\n",
       "      <th>...</th>\n",
       "      <th>Music Director_Vivek Philip</th>\n",
       "      <th>Music Director_Vivek Prakash</th>\n",
       "      <th>Music Director_Vivek Priyadarshan</th>\n",
       "      <th>Music Director_Wayne Sharpe</th>\n",
       "      <th>Music Director_Yasin Darbar</th>\n",
       "      <th>Music Director_Yuvan Shankar Raja</th>\n",
       "      <th>Music Director_Zakir Hussain</th>\n",
       "      <th>Music Director_Zubeen Garg</th>\n",
       "      <th>Music Director_Zubin Balaporia</th>\n",
       "      <th>Music Director_Zubunnisa Bangash</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>85000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>75</td>\n",
       "      <td>825000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>525</td>\n",
       "      <td>56700000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>800</td>\n",
       "      <td>4500000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1075000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 2461 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Number of Screens  Budget(INR)  hit_or_flop  Release Period_Normal  \\\n",
       "0                  5        85000            1                      1   \n",
       "1                 75       825000            1                      0   \n",
       "2                525     56700000            1                      0   \n",
       "3                800      4500000            1                      0   \n",
       "4                  1      1075000            0                      0   \n",
       "\n",
       "   Whether Remake_Yes  Whether Franchise_Yes  Genre_adult  Genre_animation  \\\n",
       "0                   0                      0            0                0   \n",
       "1                   0                      0            0                0   \n",
       "2                   0                      0            0                0   \n",
       "3                   0                      0            0                0   \n",
       "4                   0                      0            1                0   \n",
       "\n",
       "   Genre_comedy  Genre_documentary  ...  Music Director_Vivek Philip  \\\n",
       "0             0                  0  ...                            0   \n",
       "1             0                  0  ...                            0   \n",
       "2             0                  0  ...                            0   \n",
       "3             0                  0  ...                            0   \n",
       "4             0                  0  ...                            0   \n",
       "\n",
       "   Music Director_Vivek Prakash  Music Director_Vivek Priyadarshan  \\\n",
       "0                             0                                  0   \n",
       "1                             0                                  0   \n",
       "2                             0                                  0   \n",
       "3                             0                                  0   \n",
       "4                             0                                  0   \n",
       "\n",
       "   Music Director_Wayne Sharpe  Music Director_Yasin Darbar  \\\n",
       "0                            0                            0   \n",
       "1                            0                            0   \n",
       "2                            0                            0   \n",
       "3                            0                            0   \n",
       "4                            0                            0   \n",
       "\n",
       "   Music Director_Yuvan Shankar Raja  Music Director_Zakir Hussain  \\\n",
       "0                                  0                             0   \n",
       "1                                  0                             0   \n",
       "2                                  0                             0   \n",
       "3                                  0                             0   \n",
       "4                                  0                             0   \n",
       "\n",
       "   Music Director_Zubeen Garg  Music Director_Zubin Balaporia  \\\n",
       "0                           0                               0   \n",
       "1                           0                               0   \n",
       "2                           0                               0   \n",
       "3                           0                               0   \n",
       "4                           0                               0   \n",
       "\n",
       "   Music Director_Zubunnisa Bangash  \n",
       "0                                 0  \n",
       "1                                 0  \n",
       "2                                 0  \n",
       "3                                 0  \n",
       "4                                 0  \n",
       "\n",
       "[5 rows x 2461 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display a preview of the transformed dataset (first 5 rows)\n",
    "# This helps us verify that the encoding and transformations have been applied correctly\n",
    "movie_df_encoded.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "62c8683d-b2b4-49f9-97b6-bf4b52dfcc5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "hit_or_flop\n",
       "1    1226\n",
       "0     472\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "movie_df['hit_or_flop'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6716f7f3-8a8b-40be-bfc7-c739762ae58f",
   "metadata": {},
   "source": [
    "### Naive Bayes Classification for Movie Hit or Flop Prediction\n",
    "\n",
    "In this code, we perform a Naïve Bayes classification to predict whether a movie is a \"hit\" or \"flop\" based on various features.\n",
    "\n",
    "1. **Feature Selection**:\n",
    "   - We define the features (`X_movie`) by excluding the target variable (`hit_or_flop`) and set it as `y_movie`.\n",
    "\n",
    "2. **Data Splitting**:\n",
    "   - The data is split into training and testing sets using an 80-20 split, ensuring that the class distribution (hit or flop) is preserved in both sets with the `stratify` parameter.\n",
    "\n",
    "3. **Model Initialization and Training**:\n",
    "   - A Naïve Bayes model (`GaussianNB`) is initialized, trained on the training data (`X_train_movie` and `y_train_movie`).\n",
    "\n",
    "4. **Predictions**:\n",
    "   - The trained model is used to predict the target variable (`hit_or_flop`) for the test data.\n",
    "\n",
    "5. **Evaluation**:\n",
    "   - We calculate the accuracy of the model by comparing the predicted and actual values.\n",
    "   - A classification report is generated for precision, recall, F1-score, and support for both classes (\"hit\" and \"flop\").\n",
    "\n",
    "6. **Confusion Matrix**:\n",
    "   - A confusion matrix is created to evaluate the number of correct and incorrect predictions.\n",
    "\n",
    "7. **Visualization**:\n",
    "   - The confusion matrix is visualized using a heatmap to better interpret the model's performance.\n",
    "\n",
    "This process demonstrates how to use a Naïve Bayes classifier for movie classification and evaluate its performance through various metrics.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "60f17dea-a75c-465d-928b-79b2fd580672",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8588\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.61      0.71        95\n",
      "           1       0.86      0.96      0.91       245\n",
      "\n",
      "    accuracy                           0.86       340\n",
      "   macro avg       0.85      0.78      0.81       340\n",
      "weighted avg       0.86      0.86      0.85       340\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define X (features) and y (target variable)\n",
    "X_movie = movie_df_encoded.drop(columns=['hit_or_flop'])  # Features (all columns except 'hit_or_flop')\n",
    "y_movie = movie_df_encoded['hit_or_flop']  # Target variable (the 'hit_or_flop' column)\n",
    "\n",
    "# Split the data into training and testing sets (80% training, 20% testing)\n",
    "X_train_movie, X_test_movie, y_train_movie, y_test_movie = train_test_split(X_movie, y_movie, test_size=0.2, random_state=42,stratify=y_movie)\n",
    "\n",
    "# Initialize Naïve Bayes model (GaussianNB for continuous features)\n",
    "nb_model_movie = GaussianNB()\n",
    "\n",
    "# Train the Naïve Bayes model using the training data\n",
    "nb_model_movie.fit(X_train_movie, y_train_movie)\n",
    "\n",
    "# Make predictions on the test data\n",
    "y_pred_movie = nb_model_movie.predict(X_test_movie)\n",
    "\n",
    "# Evaluate the model by calculating accuracy\n",
    "accuracy_movie = accuracy_score(y_test_movie, y_pred_movie)\n",
    "print(f\"Accuracy: {accuracy_movie:.4f}\")\n",
    "\n",
    "# Print the classification report (precision, recall, F1-score, support)\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test_movie, y_pred_movie))\n",
    "\n",
    "# Generate the confusion matrix to evaluate model performance\n",
    "cm_movie = confusion_matrix(y_test_movie, y_pred_movie)\n",
    "\n",
    "# Plot the confusion matrix as a heatmap using seaborn\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(cm_movie, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=[\"Flop\", \"Hit\"], yticklabels=[\"Flop\", \"Hit\"])\n",
    "\n",
    "# Add labels and title to the confusion matrix heatmap\n",
    "plt.xlabel(\"Predicted\")\n",
    "plt.ylabel(\"Actual\")\n",
    "plt.title(\"Confusion Matrix - Movie Classification\")\n",
    "\n",
    "# Display the heatmap\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e09174d4-df63-4485-9af8-9e0878be962b",
   "metadata": {},
   "source": [
    "### Label Encoding for Categorical Columns\n",
    "\n",
    "In this code, we perform label encoding on categorical columns of the dataset to convert them into numerical values.\n",
    "\n",
    "1. **Creating a Copy of the DataFrame**:\n",
    "   - We start by creating a copy of the original DataFrame (`movie_df_label`) to avoid modifying the original data.\n",
    "\n",
    "2. **Label Encoding**:\n",
    "   - We loop through all categorical columns (identified earlier) and apply `LabelEncoder` to each column.\n",
    "   - The `LabelEncoder` assigns a unique integer to each category in the column, turning the text labels into numbers (e.g., 'hit' might become 0, 'flop' might become 1).\n",
    "\n",
    "3. **Ensuring Integer Values**:\n",
    "   - After applying label encoding to all the categorical columns, we ensure that all the transformed values are integers by converting the entire DataFrame using `astype(int)`.\n",
    "\n",
    "This process ensures that all categorical data is now in a numerical format, making it compatible with machine learning models that require numerical input.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "66dcf461-b1b2-4f03-bbf5-98ad112e6c41",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Create a copy of the original DataFrame to apply label encoding\n",
    "movie_df_label = movie_df.copy()\n",
    "\n",
    "# Loop through all categorical columns and apply Label Encoding\n",
    "for col in categorical_cols:\n",
    "    # Initialize the LabelEncoder\n",
    "    le = LabelEncoder()\n",
    "    \n",
    "    # Apply label encoding to the column and store the transformed values\n",
    "    movie_df_label[col] = le.fit_transform(movie_df_label[col])\n",
    "\n",
    "# Ensure all values are integers after encoding\n",
    "movie_df_label = movie_df_label.astype(int)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "23498e5a-01ef-4f93-95a1-0119619af5dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Release Period</th>\n",
       "      <th>Whether Remake</th>\n",
       "      <th>Whether Franchise</th>\n",
       "      <th>Genre</th>\n",
       "      <th>New Actor</th>\n",
       "      <th>New Director</th>\n",
       "      <th>New Music Director</th>\n",
       "      <th>Lead Star</th>\n",
       "      <th>Director</th>\n",
       "      <th>Music Director</th>\n",
       "      <th>Number of Screens</th>\n",
       "      <th>Budget(INR)</th>\n",
       "      <th>hit_or_flop</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>260</td>\n",
       "      <td>710</td>\n",
       "      <td>103</td>\n",
       "      <td>5</td>\n",
       "      <td>85000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>282</td>\n",
       "      <td>754</td>\n",
       "      <td>49</td>\n",
       "      <td>75</td>\n",
       "      <td>825000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>328</td>\n",
       "      <td>689</td>\n",
       "      <td>461</td>\n",
       "      <td>525</td>\n",
       "      <td>56700000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>303</td>\n",
       "      <td>54</td>\n",
       "      <td>800</td>\n",
       "      <td>4500000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>108</td>\n",
       "      <td>1</td>\n",
       "      <td>1075000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Release Period  Whether Remake  Whether Franchise  Genre  New Actor  \\\n",
       "0               1               0                  0     12          1   \n",
       "1               0               0                  0      5          1   \n",
       "2               0               0                  0     13          0   \n",
       "3               0               0                  0      5          1   \n",
       "4               0               0                  0      1          1   \n",
       "\n",
       "   New Director  New Music Director  Lead Star  Director  Music Director  \\\n",
       "0             0                   0        260       710             103   \n",
       "1             0                   1        282       754              49   \n",
       "2             0                   0        328       689             461   \n",
       "3             0                   0          0       303              54   \n",
       "4             1                   1          1         4             108   \n",
       "\n",
       "   Number of Screens  Budget(INR)  hit_or_flop  \n",
       "0                  5        85000            1  \n",
       "1                 75       825000            1  \n",
       "2                525     56700000            1  \n",
       "3                800      4500000            1  \n",
       "4                  1      1075000            0  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display a preview of the transformed dataset\n",
    "movie_df_label.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02ef57a3-ad00-4fcd-ad1c-5e912d41bebf",
   "metadata": {},
   "source": [
    "### Training Naïve Bayes Model with Label-Encoded Data\n",
    "\n",
    "In this section, we train a Naïve Bayes model using the label-encoded dataset to predict whether a movie will be a \"hit\" or \"flop\".\n",
    "\n",
    "1. **Defining Features and Target Variable**:\n",
    "   - `X_movie_label` contains all the feature columns (excluding the target variable `hit_or_flop`).\n",
    "   - `y_movie_label` contains the target variable, which indicates if the movie is a \"hit\" or \"flop\".\n",
    "\n",
    "2. **Splitting Data into Training and Testing Sets**:\n",
    "   - We split the dataset into training (80%) and testing (20%) sets using `train_test_split`. \n",
    "   - The `random_state=42` ensures that the split is reproducible.\n",
    "   - The `stratify=y_movie` ensures that the proportion of \"hit\" and \"flop\" labels is the same in both training and testing sets.\n",
    "\n",
    "3. **Training the Naïve Bayes Model**:\n",
    "   - We initialize a Naïve Bayes model (`GaussianNB`) suitable for continuous features.\n",
    "   - The model is trained using the training data (`X_train_movie_label` and `y_train_movie_label`).\n",
    "\n",
    "4. **Making Predictions**:\n",
    "   - The trained model is used to make predictions on the test set (`X_test_movie_label`).\n",
    "\n",
    "5. **Model Evaluation**:\n",
    "   - The accuracy of the model is calculated using `accuracy_score` to compare the predicted values (`y_pred_movie_label`) with the actual values (`y_test_movie_label`).\n",
    "   - The classification report, which includes metrics like precision, recall, and F1-score, is printed to evaluate the model's performance.\n",
    "   \n",
    "6. **Confusion Matrix**:\n",
    "   - A confusion matrix is generated to evaluate the performance of the model.\n",
    "   - The confusion matrix is plotted as a heatmap using `seaborn` to visually assess the classification results. The color scheme is set to 'Blues', and the matrix is annotated with integer values to show the number of true positives, false positives, true negatives, and false negatives.\n",
    "   - The plot includes labels for the x-axis (\"Predicted\") and y-axis (\"Actual\") and a title for better clarity.\n",
    "\n",
    "This process provides a clear understanding of the model's performance in classifying movies as \"hit\" or \"flop\" based on the features and the label-encoded data.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "59a71b3a-75af-4f31-8cf4-4dc16d2b12f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8588\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.61      0.71        95\n",
      "           1       0.86      0.96      0.91       245\n",
      "\n",
      "    accuracy                           0.86       340\n",
      "   macro avg       0.85      0.78      0.81       340\n",
      "weighted avg       0.86      0.86      0.85       340\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 600x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define X (features) and y (target variable) for label-encoded dataset\n",
    "# X_movie_label contains all the feature columns (after label encoding)\n",
    "# y_movie_label contains the target variable, which is 'hit_or_flop'\n",
    "X_movie_label = movie_df_label.drop(columns=['hit_or_flop'])\n",
    "y_movie_label = movie_df_label['hit_or_flop']\n",
    "\n",
    "# Split into training and testing sets (80% training, 20% testing)\n",
    "# Random state ensures reproducibility of the results\n",
    "X_train_movie_label, X_test_movie_label, y_train_movie_label, y_test_movie_label = train_test_split(\n",
    "    X_movie_label, y_movie_label, test_size=0.2, random_state=42, stratify=y_movie\n",
    ")\n",
    "\n",
    "# Initialize the Naïve Bayes model (GaussianNB is used for continuous features)\n",
    "nb_model_movie_label = GaussianNB()\n",
    "\n",
    "# Train the model using the training data\n",
    "nb_model_movie_label.fit(X_train_movie_label, y_train_movie_label)\n",
    "\n",
    "# Make predictions on the test data\n",
    "y_pred_movie_label = nb_model_movie_label.predict(X_test_movie_label)\n",
    "\n",
    "# Evaluate the model's performance by calculating accuracy\n",
    "accuracy_movie_label = accuracy_score(y_test_movie_label, y_pred_movie_label)\n",
    "print(f\"Accuracy: {accuracy_movie_label:.4f}\")\n",
    "\n",
    "# Print the classification report, which includes precision, recall, f1-score, and support\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test_movie_label, y_pred_movie_label))\n",
    "\n",
    "# Generate the confusion matrix to visualize the classification performance\n",
    "cm_movie_label = confusion_matrix(y_test_movie_label, y_pred_movie_label)\n",
    "\n",
    "# Plot the confusion matrix as a heatmap\n",
    "# Annotate the confusion matrix with integer values and set color scheme to 'Blues'\n",
    "plt.figure(figsize=(6, 4))\n",
    "sns.heatmap(cm_movie_label, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=[\"Flop\", \"Hit\"], yticklabels=[\"Flop\", \"Hit\"])\n",
    "\n",
    "# Add labels and title to the confusion matrix plot\n",
    "plt.xlabel(\"Predicted\")\n",
    "plt.ylabel(\"Actual\")\n",
    "plt.title(\"Confusion Matrix - Movie Classification (Label Encoded)\")\n",
    "\n",
    "# Show the confusion matrix plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "46163644-0a12-4f72-9d6d-ca7970d08894",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Hyperparameters: {'var_smoothing': 1e-09}\n",
      "Accuracy: 0.8588\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.84      0.61      0.71        95\n",
      "           1       0.86      0.96      0.91       245\n",
      "\n",
      "    accuracy                           0.86       340\n",
      "   macro avg       0.85      0.78      0.81       340\n",
      "weighted avg       0.86      0.86      0.85       340\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "\n",
    "# Define the Naive Bayes model\n",
    "movie_nb = GaussianNB()\n",
    "\n",
    "# Define the hyperparameter grid for tuning\n",
    "param_grid = {\n",
    "    'var_smoothing': [1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1.0]\n",
    "}\n",
    "\n",
    "# Set up the GridSearchCV\n",
    "grid_search = GridSearchCV(estimator=movie_nb, param_grid=param_grid, cv=5, scoring='accuracy',n_jobs=-1)\n",
    "\n",
    "# Fit the grid search to the training data\n",
    "grid_search.fit(X_train_movie_label, y_train_movie_label)\n",
    "\n",
    "# Get the best hyperparameters\n",
    "best_params = grid_search.best_params_\n",
    "print(f\"Best Hyperparameters: {best_params}\")\n",
    "\n",
    "# Get the best model\n",
    "best_movie_nb = grid_search.best_estimator_\n",
    "\n",
    "# Evaluate the model\n",
    "y_pred_movie_best = best_movie_nb.predict(X_test_movie_label)\n",
    "\n",
    "# Print evaluation metrics\n",
    "print(f\"Accuracy: {accuracy_score(y_test_movie_label, y_pred_movie_best):.4f}\")\n",
    "print(\"\\nClassification Report:\")\n",
    "print(classification_report(y_test_movie_label, y_pred_movie_best))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1cdefe43-ec9c-449a-b283-432da34f296e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
